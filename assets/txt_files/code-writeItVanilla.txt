$.cloudinary.config({ cloud_name: \'writeit\', api_key: \'957122638812785\'});<br><br><br><br>//VARIABLE DECLARATIONS<br>let richTextField = document.getElementById(\'richTextField\');<br>let buttonBold = document.getElementById(\'buttonBold\');<br>let buttonItalic = document.getElementById(\'buttonItalic\');<br>let buttonUnderline = document.getElementById(\'buttonUnderline\');<br>let buttonStrikethrough = document.getElementById(\'buttonStrikethrough\');<br>let buttonSubscript = document.getElementById(\'buttonSubscript\');<br>let buttonSuperscript = document.getElementById(\'buttonSuperscript\');<br>let buttonUndo = document.getElementById(\'buttonUndo\');<br>let buttonRedo = document.getElementById(\'buttonRedo\');<br>let buttonCut = document.getElementById(\'buttonCut\');<br>let buttonCopy = document.getElementById(\'buttonCopy\');<br>let buttonPaste = document.getElementById(\'buttonPaste\');<br>let buttonSelectAll = document.getElementById(\'buttonSelectAll\');<br>let buttonJustifyLeft = document.getElementById(\'buttonJustifyLeft\');<br>let buttonJustifyCenter = document.getElementById(\'buttonJustifyCenter\');<br>let buttonJustifyRight = document.getElementById(\'buttonJustifyRight\');<br>let buttonJustifyFull = document.getElementById(\'buttonJustifyFull\');<br>let buttonIndent = document.getElementById(\'buttonIndent\');<br>let buttonOutdent = document.getElementById(\'buttonOutdent\');<br>let buttonInsertUnorderedList = document.getElementById(\'buttonInsertUnorderedList\');<br>let buttonInsertOrderedList = document.getElementById(\'buttonInsertOrderedList\');<br>let buttonInsertParagraph = document.getElementById(\'buttonInsertParagraph\');<br>let selectParagraphStyle = document.getElementById(\'selectParagraphStyle\')<br>let buttonHorizontalRule = document.getElementById(\'buttonHorizontalRule\')<br>let buttonInsertLink = document.getElementById(\'buttonInsertLink\');<br>let buttonRemoveLink = document.getElementById(\'buttonRemoveLink\');<br>let buttonInlineSourceCode = document.getElementById(\'buttonInlineSourceCode\');<br>let buttonSourceCode = document.getElementById(\'buttonSourceCode\');<br>let buttonToggleEdit = document.getElementById(\'buttonToggleEdit\');<br>let toggleIcon = document.getElementById(\'toggleIcon\');<br>let selectFontStyle = document.getElementById(\'selectFontStyle\');<br>let selectFontSize = document.getElementById(\'selectFontSize\');<br>let buttonFontColor = document.getElementById(\'buttonFontColor\');<br>let inputFontColor = document.getElementById(\'inputFontColor\');<br>// let inputBackgroundColor = document.getElementById(\'inputBackgroundColor\');<br>let buttonHighlightColor = document.getElementById(\'buttonHighlightColor\');<br>let inputHighlightColor = document.getElementById(\'inputHighlightColor\');<br>let buttonClearColorSettings = document.getElementById(\'buttonClearColorSettings\');<br>let buttonInsertOnlineImage = document.getElementById(\'buttonInsertOnlineImage\');<br>let buttonInsertOnlineVideo = document.getElementById(\'buttonInsertOnlineVideo\');<br>let buttonInsertCloudImage = document.getElementById(\'buttonInsertCloudImage\');<br>let formImageUploadCloudinary = document.getElementById(\'formImageUploadCloudinary\');<br>let cloudinary_fileupload = document.getElementsByClassName(\'cloudinary_fileupload\');<br><br><br><br>let formNewArticle = document.getElementById(\'formNewArticle\');<br>let buttonSubmitNewArticle = document.getElementById(\'buttonSubmitNewArticle\');<br>let inputNewArticleTitleVisible = document.getElementById(\'inputNewArticleTitleVisible\');<br>let inputNewArticle = document.getElementById(\'inputNewArticle\')<br><br><br><br><br><br><br>//EVENT LISTENERS<br>buttonBold.addEventListener(\'click\', ()=&gt;{execCmd(\'bold\', false, null)});<br>buttonItalic.addEventListener(\'click\', ()=&gt;{execCmd(\'italic\', false, null)});<br>buttonUnderline.addEventListener(\'click\', ()=&gt;{execCmd(\'underline\', false, null)});<br>buttonStrikethrough.addEventListener(\'click\', ()=&gt;{execCmd(\'strikethrough\', false, null)});<br>buttonJustifyLeft.addEventListener(\'click\', ()=&gt;{execCmd(\'justifyLeft\', false, null)});<br>buttonJustifyCenter.addEventListener(\'click\', ()=&gt;{execCmd(\'justifyCenter\', false, null)});<br>buttonJustifyRight.addEventListener(\'click\', ()=&gt;{execCmd(\'justifyRight\', false, null)});<br>buttonJustifyFull.addEventListener(\'click\', ()=&gt;{execCmd(\'justifyFull\', false, null)});<br>buttonCut.addEventListener(\'click\', ()=&gt;{execCmd(\'cut\', false, null)});<br>buttonCopy.addEventListener(\'click\', ()=&gt;{execCmd(\'copy\', false, null)});<br>buttonPaste.addEventListener(\'click\', ()=&gt;{execCmd(\'paste\', false, null)}); //This has a problem<br>buttonIndent.addEventListener(\'click\', ()=&gt;{execCmd(\'indent\', false, null)});<br>buttonOutdent.addEventListener(\'click\', ()=&gt;{execCmd(\'outdent\', false, null)});<br>buttonSubscript.addEventListener(\'click\', ()=&gt;{execCmd(\'subscript\', false, null)});<br>buttonSuperscript.addEventListener(\'click\', ()=&gt;{execCmd(\'superscript\', false, null)});<br>buttonUndo.addEventListener(\'click\', ()=&gt;{execCmd(\'undo\', false, null)});<br>buttonRedo.addEventListener(\'click\', ()=&gt;{execCmd(\'redo\', false, null)});<br>buttonInsertUnorderedList.addEventListener(\'click\', ()=&gt;{execCmd(\'insertUnorderedList\', false, null)});<br>buttonInsertOrderedList.addEventListener(\'click\', ()=&gt;{execCmd(\'insertOrderedList\', false, null)});<br>buttonInsertParagraph.addEventListener(\'click\', ()=&gt;{execCmd(\'insertParagraph\', false, null)});<br>selectParagraphStyle.addEventListener(\'change\', ()=&gt;{execCmd(\'formatBlock\', false, selectParagraphStyle[selectParagraphStyle.selectedIndex].getAttribute(\'value\'))});<br>buttonHorizontalRule.addEventListener(\'click\', ()=&gt;{execCmd(\'insertHorizontalRule\'), false, null});<br>buttonInsertLink.addEventListener(\'click\', ()=&gt;{execCmd(\'createLink\', false, prompt(\'Please enter a URL\', \'http://\'))});<br>buttonRemoveLink.addEventListener(\'click\', ()=&gt;{execCmd(\'unlink\', false, null)});<br>buttonInlineSourceCode.addEventListener(\'click\', ()=&gt;{execCmdPrompt(\'insertHTML\', false, prompt(\'Please insert the raw html here\', \'Example: &lt;h1&gt;writeIt rocks!&lt;/h1&gt;\'))});<br>buttonSourceCode.addEventListener(\'click\', ()=&gt;{toggleSource()});<br>buttonToggleEdit.addEventListener(\'click\', ()=&gt;{toggleEdit()})<br>selectFontStyle.addEventListener(\'change\', ()=&gt;{execCmd(\'fontName\', false, selectFontStyle[selectFontStyle.selectedIndex].getAttribute(\'value\', \'value\'))});<br>selectFontSize.addEventListener(\'change\', ()=&gt;{execCmd(\'fontSize\', false, selectFontSize[selectFontSize.selectedIndex].getAttribute(\'value\'))});<br>buttonFontColor.addEventListener(\'click\', ()=&gt;{clickInputInsert(inputFontColor)});<br>inputFontColor.addEventListener(\'change\', ()=&gt;{execCmd(\'foreColor\', false, inputFontColor.value)}); //Not sure why the getAttribute(\'value\')  does not work<br>// inputBackgroundColor.addEventListener(\'change\', ()=&gt;{execCmd(\'backColor\', false, inputBackgroundColor.value)}); //Need to work on this. Will this come in the function through a form?<br>buttonHighlightColor.addEventListener(\'click\', ()=&gt;{clickInputInsert(inputHighlightColor)});<br>inputHighlightColor.addEventListener(\'change\', ()=&gt;{execCmd(\'hiliteColor\', false, inputHighlightColor.value)});<br>buttonClearColorSettings.addEventListener(\'click\', clearColorSettings);<br>buttonInsertOnlineImage.addEventListener(\'click\', ()=&gt;{execCmdPrompt(\'insertImage\', false, prompt(\'Please enter the image url\', \'http://\'))});<br>buttonInsertOnlineVideo.addEventListener(\'click\', ()=&gt;{uploadOnlineVideo(prompt(\'Please enter the video url\', \'http://\'))})<br>buttonSelectAll.addEventListener(\'click\', ()=&gt;{execCmd(\'selectAll\')});<br>buttonInsertCloudImage.addEventListener(\'click\', ()=&gt;{clickInputInsert(cloudinary_fileupload[1])})<br><br><br>buttonSubmitNewArticle.addEventListener(\'mouseover\', ()=&gt;{registerIframeInfo()});<br>inputNewArticleTitleVisible.addEventListener(\'keyup\', inputUpdateTitle);<br><br><br><br><br><br><br><br>// ----------FUNCTION DECLARATIONS=========================<br>//ENABLE EDIT MODE FOR THE IFRAME AREA<br>function enableEditMode() {<br>  richTextField.contentDocument.designMode = \'On\';<br>  richTextField.contentDocument.body.focus();<br>}<br><br><br>//EXECCOMMAND - ALLOWS US TO RUN COMMANDS TO MANIPULATE THE CONTENTS OF THE EDITABLE REGION<br>function execCmd(command, bool, value) {<br>  console.log(command);<br>  event.preventDefault();<br>  richTextField.contentDocument.execCommand(command, bool, value)<br>  richTextField.contentDocument.body.focus();<br>}<br><br><br>//EXECCOMMAND FOR PROMPT USER INFO<br>function execCmdPrompt(command, bool, value) {<br>  if (value !== null) {<br>    event.preventDefault();<br>    richTextField.contentDocument.execCommand(command, bool, value)<br>    richTextField.contentDocument.body.focus();<br>  }<br>}<br><br><br><br>//SWITCH FROM TEXT EDITOR TO RAW HTML<br>let showingSourceCode = false; //A variable that defines if the view should be turned on or off<br>function toggleSource() {<br>  if (showingSourceCode) {<br>    richTextField.contentDocument.getElementsByTagName(\'body\')[0].innerHTML = richTextField.contentDocument.getElementsByTagName(\'body\')[0].textContent;<br>    showingSourceCode = false;<br>  }<br>  else {<br>    richTextField.contentDocument.getElementsByTagName(\'body\')[0].textContent = richTextField.contentDocument.getElementsByTagName(\'body\')[0].innerHTML;<br>    showingSourceCode = true;<br>  }<br>}<br>// The textContent property sets or returns the textual content of the specified node, and all its descendants.<br>// If you set the textContent property, any child nodes are removed and replaced by a single Text node containing the specified string.<br><br><br><br>//SWITCH EDITOR ON AND OFF<br>let isInEditMode = true;<br>function toggleEdit() {<br>  if (isInEditMode) {<br>    //Change the icon<br>    event.preventDefault();<br>    toggleIcon.classList.add(\'fa-toggle-off\');<br>    toggleIcon.classList.remove(\'fa-toggle-on\');<br>    //switch off the editor<br>    richTextField.contentDocument.designMode = \'Off\';<br>    isInEditMode = false;<br>  }<br>  else {<br>    //Change the icon<br>    event.preventDefault();<br>    toggleIcon.classList.add(\'fa-toggle-on\');<br>    toggleIcon.classList.remove(\'fa-toggle-off\');<br>    //Switch on the editor<br>    richTextField.contentDocument.designMode = \'On\';<br>    richTextField.contentDocument.body.focus();<br>    isInEditMode = true;<br>  }<br>}<br><br><br>//CONNECT IFRAME TO THE TEXTAREA IN ORDER TO SUBMIT THE DATA TO DATABASE<br>function registerIframeInfo(){<br>  document.getElementById(\'textAreaNewArticle\').value = document.getElementById(\'richTextField\').contentDocument.body.innerHTML;<br>}<br><br><br>//CLEAR THE COLOR SETTINGS FOR FONT, HIGHLIGHT AND BACKGROUND<br>function clearColorSettings() {<br>  console.log(inputFontColor);<br>  execCmd(\'foreColor\', false, \'#000000\');<br>  execCmd(\'hiliteColor\', false, \'#ffffff\');<br>  richTextField.contentDocument.body.focus();<br>}<br><br><br>//UPDATE THE TITLE IN THE HIDDEN INPUT FROM ENTRY IN THE VISIBLE INPUT<br>function inputUpdateTitle() {<br>  inputNewArticleTitle.value = inputNewArticleTitleVisible.value<br>}<br><br><br>//ACTIVATE INPUT TYPE=FILE TAGS BY CLICKING AT DIFFERENT BUTTONS<br>function clickInputInsert(inputTag){<br>  inputTag.click();<br>}<br><br><br>//UPLOAD AND RENDER IMAGE FROM HARD DRIVE<br>function previewImageFile(source) {<br>  let newImage = document.createElement(\'img\');<br><br>  var file = source.files[0];<br>  var reader = new FileReader(); //reads contents of files in the hard drive<br>  reader.addEventListener(\'load\', function () {<br>    newImage.src = reader.result;<br>  }, false);<br><br><br>  if (file) {<br>    reader.readAsDataURL(file); //read contents of file and transform into base 64<br>  }<br>  console.log(newImage);<br>  newImage.style.width = \'640px\';<br>  // newImage.style.resize = \'both\';<br>  // newImage.style.overflow = \'auto\';<br>  // newImage.className = \'newImage\'<br><br>  //Find the right position for image to be inserted<br>  let cursorText = richTextField.contentDocument.getSelection().getRangeAt(0).endContainer.data; //returns a Selection object representing the text currently selected in the document.<br>  let iframeChildren = richTextField.contentDocument.body.children;<br>  for (let i = 0; i &lt; iframeChildren.length; i++) {<br>    console.log(\'innerHTML for position\' + i + \':\' + iframeChildren[i].textContent.replace(/&nbsp;/g, \'\').trim());<br>    // console.log(\'CursorText: \' + cursorText.trim());<br>    if (iframeChildren[i].textContent.replace(/&nbsp;/g, \'\').trim() === cursorText.trim()) {<br>      console.log(\'IN THE FIRST IF STATEMENT\');<br>      // richTextField.contentDocument.body.insertBefore(newImage, iframeChildren[i]);<br>      iframeChildren[i].appendChild(newImage);<br><br>      return;<br>    }<br>  }<br>  if (richTextField.contentDocument.body.innerHTML === \'\') {<br>    richTextField.contentDocument.body.appendChild(newImage);<br>  }<br>  else if (richTextField.contentDocument.body.innerHTML !== \'\') {<br>    console.log(\'Got in the else statement\');<br>    richTextField.contentDocument.body.insertBefore(newImage, iframeChildren[0]);<br>  }<br>  //Focus the document<br>  richTextField.contentDocument.body.focus();<br>}<br><br><br><br>//UPLOAD AND RENDER VIDEO FROM HARD DRIVE<br>//preview the information coming from the source<br>function previewFile(dataSource, sourceTagSrcAttribute) {<br>  var file = dataSource.files[0];<br>  var reader = new FileReader(); //reads contents of files in the hard drive<br><br>  reader.addEventListener(\'load\', ()=&gt;{<br>    sourceTagSrcAttribute.src = reader.result;<br>    console.log(\'inside event listener\');<br><br>    var dataURL = reader.result; //Get the information about the type of the file being imported<br>    var mimeType = dataURL.split(\',\')[0].split(\':\')[1].split(\';\')[0];<br>    sourceTagSrcAttribute.setAttribute(\'type\', mimeType);<br>    console.log(sourceTagSrcAttribute.getAttribute(\'type\'));<br>  }, false);<br><br>  if (file) {<br>    reader.readAsDataURL(file); //read contents of file and transform into base 64<br>    console.log(file);<br>  }<br>}<br><br><br>// find position in document and upload media file<br>function findPositionAndUploadVideo(source) {<br><br>  let newVideo = document.createElement(\'video\');<br>  let newVideoSource = document.createElement(\'source\');<br>  let cursorText = richTextField.contentDocument.getSelection().getRangeAt(0).endContainer.data; //returns a Selection object representing the text currently selected in the document.<br>  let iframeChildren = richTextField.contentDocument.body.children;<br><br>  newVideo.setAttribute(\'controls\', \'controls\');<br>  newVideo.setAttribute(\'allowfullscreen\', \'allowfullscreen\');<br>  newVideo.style.width = \'640px\';<br>  newVideo.className = \'newVideo\';<br>  newVideo.appendChild(newVideoSource);<br><br>  if (richTextField.contentDocument.body.textContent === \'\') { //If the iframe is empty<br>    console.log(\'first if statement\');<br>    previewFile(source, newVideoSource);<br>    setTimeout(function(){<br>      richTextField.contentDocument.body.appendChild(newVideo);<br>      richTextField.contentDocument.body.append(\'.\');<br>      richTextField.contentDocument.body.focus();<br>    }, 1000);<br>  }<br>  else if (richTextField.contentDocument.body.textContent !== \'\' && richTextField.contentDocument.body.children.length === 0) {//If the iframe has text but no html children<br>    previewFile(source, newVideoSource);<br>    setTimeout(function(){<br>      richTextField.contentDocument.body.appendChild(newVideo);<br>      richTextField.contentDocument.body.append(\'.\');<br>      richTextField.contentDocument.body.focus();<br>    }, 1000);<br>  }<br>  else if (richTextField.contentDocument.body.textContent !== \'\' && richTextField.contentDocument.body.children.length !== 0) {//The iframe has both content and html childrean<br>    for (let i = 0; i &lt; iframeChildren.length; i++) {<br>      console.log(\'innerHTML for position\' + i + \':\' + iframeChildren[i].innerHTML.replace(/&nbsp;/g, \'\').trim());<br>      console.log(cursorText);<br>      console.log(iframeChildren[i].textContent);<br>      // console.log(\'CursorText: \' + cursorText.trim());<br>      if (cursorText === undefined && iframeChildren[i].textContent.replace(/&nbsp;/g, \'\').trim() === \'\') {<br>        console.log(\'IN THE IF OF THE ELSE\');<br>        previewFile(source, newVideoSource);<br>        setTimeout(function(){<br>          iframeChildren[i].appendChild(newVideo);<br>          richTextField.contentDocument.body.append(\'.\');<br>          richTextField.contentDocument.body.focus();<br>        }, 1000);<br>        return;<br>      }<br>      else if (iframeChildren[i].textContent.replace(/&nbsp;/g, \'\').trim() === cursorText.trim()) {<br>        console.log(\'IN THE ELSE IF OF THE ELSE\');<br>        // richTextField.contentDocument.body.insertBefore(newVideo, iframeChildren[i]);<br>        previewFile(source, newVideoSource);<br>        setTimeout(function(){<br>          iframeChildren[i].appendChild(newVideo);<br>          richTextField.contentDocument.body.append(\'.\');<br>          richTextField.contentDocument.body.focus();<br>        }, 1000);<br>        return;<br>      }<br>    }<br>  }<br>}<br><br><br><br>//UPLOAD IMAGES OR VIDEOS FROM HARD DRIVE<br>$(\'.cloudinary_fileupload\').append($.cloudinary.unsigned_upload_tag(\'z2mez0vj\',<br>{ cloud_name: \'writeit\' })<br>  .bind(\'fileuploadprogress\', function(e, data) {<br>    $(\'.progress_bar\').css(\'width\', Math.round((data.loaded * 100.0) / data.total) + \'%\');<br>  })<br>  .bind(\'cloudinarydone\', function(e, data) {<br>    console.log(e);<br>    console.log(data.result);<br>      console.log(data.result.path);<br>      console.log(data.result.path.slice(data.result.path.length - 3));<br><br>      if (data.result.path.slice(data.result.path.length - 3) === \'jpg\' || data.result.path.slice(data.result.path.length - 3) === \'png\' || data.result.path.slice(data.result.path.length - 3) === \'bmp\') {<br>        let newImageSource = \'https://res.cloudinary.com/writeit/image/upload/w_640,q_80,f_auto/\' + data.result.path.slice(0, data.result.path.length - 3) + \'jpg\';<br>        let newImage = document.createElement(\'img\');<br>        newImage.src = newImageSource;<br>        newImage.className = \'newImage\';<br>        execCmdPrompt(\'insertImage\', false, newImageSource);<br>      }<br>      else if (data.result.path.slice(data.result.path.length - 3) === \'mp4\' || data.result.path.slice(data.result.path.length - 3) === \'mov\') {<br>        let newVideoSource = \'https://res.cloudinary.com/writeit/video/upload/w_640,q_80/\' + data.result.path.slice(0, data.result.path.length - 3);<br>        console.log(\'https://res.cloudinary.com/writeit/video/upload/w_640,q_80/\' + data.result.path.slice(0, data.result.path.length - 3) + \'mp4\');<br>        let htmlVideoTag = \'&lt;video poster=\' + newVideoSource + \'jpg controls&gt;&lt;source src=\\'\' + newVideoSource + \'mp4\\'/&gt;&lt;/video&gt;\'<br>        execCmdPrompt(\'insertHTML\', false, htmlVideoTag);<br>      }<br>      else if (data.result.path.slice(data.result.path.length - 3) === \'gif\') {<br>        let newGifSource = \'https://res.cloudinary.com/writeit/image/upload/w_320,q_80/\' + data.result.path.slice(0, data.result.path.length - 3);<br>        let htmlGifVideoTag = \'&lt;video poster=\' + newGifSource + \'jpg autoplay loop&gt;&lt;source src=\\'\' + newGifSource + \'mp4\\'/&gt;&lt;/video&gt;\'<br>        execCmdPrompt(\'insertHTML\', false, htmlGifVideoTag);<br>      }<br>      else {<br>        alert(\'The file you are trying to upload is not supported\');<br>      }<br>  })<br>);<br><br><br>// UPLOAD ONLINE VIDEOS<br>  function uploadOnlineVideo(url){<br>    var uploadParameter = \'&lt;iframe width=\\'640\\' height=\\'360\\' src=\\'\' + url + \'\\' frameborder=\\'0\\' allowfullscreen&gt;&lt;/iframe&gt;\'<br>    execCmdPrompt(\'insertHTML\', false, uploadParameter)<br>  }<br><br><br><br><br>//FUNCTION CALLS<br>enableEditMode();"}
