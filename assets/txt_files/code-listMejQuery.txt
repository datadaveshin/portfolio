var express = require(\'express\');<br>var router = express.Router();<br>var bcrypt = require(\'bcrypt\');<br>var knex = require(\'../db/knex\');<br><br>//Log In POST<br>router.post(\'/login\', function(req, res, next) {<br>  console.log(req.body);<br><br>  knex(\'users\')<br>  .select()<br>  .where(\'email\', req.body.email)<br>  .returning(\'*\')<br>  .then(function (existingUsers) {<br>    var user = existingUsers[0];<br>    if (existingUsers.length === 0) {<br>      console.log(user);<br>      res.render(\'error\', {<br>        message: \'User does not exist\',<br>        status: 400,<br>        description: \'Sorry but the email you entered does not exist in the database. Please try to log in with a different email or try to sign up.\',<br>        user: req.session.user || \'guest\'<br>      });<br>    } else {<br>      if (bcrypt.compareSync(req.body.password, user.hashed_password) === true) {<br>        console.log(\'Hoorah!!!\');<br>        req.session.user = req.body.email;<br>        req.session.cookie.maxAge = 24 * 60 * 60 * 10;<br>        knex<br>        .select(\'list.name\', \'list.id\', \'users.id\', \'users.email\')<br>        .table(\'list\')<br>        .innerJoin(\'users\', \'list.user_id\', \'users.id\')<br>        .where({email: req.session.user})<br>        .returning(\'*\')<br>        .then(function (listTitles) {<br>          res.render(\'lists\',{<br>            listTitles: listTitles,<br>            email: listTitles.email,<br>            user: req.session.user || \'guest\'<br>          })<br>        })<br>      }<br>      else {<br>        console.log(\'POOP!\');<br>        res.render(\'error\', {<br>          message: \'Incorrect Login Credentials\',<br>          status: 400,<br>          description: \'You have entered incorrect login credentials\',<br>          user: req.session.user || \'guest\'<br>        })<br>      }<br><br><br>    }<br>  });<br>}); //End of router.post<br><br><br>//Sing up POST<br>router.post(\'/signup\', function(req, res, next) {<br>  console.log(req.body);<br><br>  knex(\'users\')<br>  .select()<br>  .where(\'email\', req.body.email)<br>  .returning(\'*\')<br>  .then(function (existingUsers) {<br>    if (existingUsers.length &gt; 0) {<br>      var existingUser = existingUsers[0];<br>      console.log(existingUser);<br>      res.render(\'error\', {<br>        message: \'User already exists\',<br>        status: 400,<br>        description: \'Sorry but the email you entered exists already in the database. Please try siging up with a different email or try to login.\',<br>        user: req.session.user || \'guest\'<br>      });<br>    }<br>  })<br><br>  var hashedPassword = new Promise(function (resolve, reject) {<br>    resolve(saltPassword(req.body.password));<br>  })<br><br>  hashedPassword<br>  .then(function(pwd){<br>    var newUserObj = {<br>      email: req.body.email,<br>      hashed_password: pwd<br>    }<br>    return newUserObj;<br>  })<br>  .then(function (newUser) {<br><br>    knex(\'users\')<br>    .insert(newUser)<br>    .returning(\'email\')<br>    .then(function(newUserEmails){<br>      var newUserEmail = newUserEmails[0];<br>      req.session.user = newUserEmail;<br>      req.session.cookie.maxAge = 24 * 60 * 60 * 10;<br>      res.render(\'lists\', {<br>        user: req.session.user<br>      });<br>    })<br>  })<br><br>});<br><br>//LOGOUT BUTTON<br>router.get(\'/logout\', (req, res, next) =&gt; {<br>  console.log(\'LOGOUT: req session before logout\');<br>  console.log(req.session);<br>  req.session.destroy(function (err) {<br>      res.render(\'index\', {<br>        title: \'listMe.xyz\',<br>        user: \'guest\'<br>      });<br>  });<br>  console.log(\'LOGOUT: req session after logout\');<br>  console.log(req.session);<br>});<br><br><br><br>/* GET home page. */<br>router.get(\'/\', function(req, res, next) {<br>  res.render(\'index\', {<br>    title: \'listMe.xyz\',<br>    user: req.session.user || \'guest\'<br>  });<br>});<br><br>//FUNCTIONS FOR PASSWORD HASHING<br><br>//Salt of password<br>function saltPassword(passwordEntry) {<br>  var salt = bcrypt.genSaltSync(10);<br>  console.log(\'The salt is:\', salt);<br>  return hashPassword(passwordEntry, salt);<br>}<br><br>function hashPassword(passwordEntry, salt) {<br>  var hash = bcrypt.hashSync(passwordEntry, salt);<br>  console.log(\'The hash is:\', hash);<br>  return hash;<br>}<br><br>module.exports = router;"}
