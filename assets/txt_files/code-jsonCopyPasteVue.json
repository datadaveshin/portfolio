{"code": "<!DOCTYPE html>\n<html lang=\'en\' dir=\'ltr\'>\n  <head>\n    <meta charset=\'utf-8\'>\n    <link rel=\'stylesheet\' href=\'https://stackpath.bootstrapcdn.com/bootstrap/4.1.1/css/bootstrap.min.css\' integrity=\'sha384-WskhaSGFgHYWDcbwN70/dfYBj47jz9qbsMId/iRN3ewGhXQFZCSftd1LZCfmhktB\' crossorigin=\'anonymous\'>\n    <script src=\'https://cdn.jsdelivr.net/npm/vue/dist/vue.js\'></script>\n    <title>Copy Paste!!!</title>\n\n    <style media=\'screen\'>\n      body{\n\n      }\n\n      #container{\n        display: grid;\n        grid-template-columns: 100vw;\n        grid-template-rows: 95vh 5vh;\n        grid-template-areas:\n        \'mainArea\'\n        \'footerArea\';\n      }\n\n      #mainArea{\n        grid-area: mainArea;\n        padding: 20px;\n      }\n\n      #footerArea{\n        grid-area: footerArea;\n        background: rgb(0,0,0);\n        line-height: 5vh;\n        text-align: center;\n        font-size: 1.4rem;\n        border-top: 3px solid black;\n        color: white;\n      }\n\n      #footerArea a{\n        color: white;\n      }\n\n      #sectionCopyPasteArea{\n        display: grid;\n        grid-template-columns: 3fr 5fr 2fr;\n        grid-template-rows: 1fr 1fr;\n        grid-template-areas:\n        \'divInstructionsArea divTextArea divFilterArea\'\n        \'divRadioButtonsArea divTextArea divFilterArea\';\n        grid-column-gap: 10px;\n        margin-bottom: 20px;\n      }\n\n      #divInstructionsArea{\n        grid-area: divInstructionsArea;\n      }\n\n      #divRadioButtonsArea{\n        grid-area: divRadioButtonsArea;\n      }\n\n      #divTextArea{\n        grid-area: divTextArea;\n      }\n\n      #divFilterArea{\n        grid-Area: divFilterArea;\n      }\n\n      article{\n        border-top: 2px solid black;\n      }\n\n      div[class*=\'media\']{\n        margin: 20px;\n      }\n\n      img {\n        max-width: 800px;\n      }\n    </style>\n\n  </head>\n\n\n\n\n\n\n\n  <body>\n    <div id=\'container\'>\n      <main id=\'mainArea\'>\n        <section id=\'sectionCopyPasteArea\'>\n          <div id=\'divInstructionsArea\'>\n            <h3>Instructions</h3>\n            <ol>\n              <li>Go to \'preview\'.</li>\n              <li>In the view option, select \'raw\'.</li>\n              <li>Copy the JSON formated text.</li>\n              <li>Paste it at the textarea.</li>\n              <li>Use the filters to filter through the results if needed.</li>\n            </ol>\n          </div>\n\n\n\n\n          <!-- <div id=\'divRadioButtonsArea\'>\n            <h3>Which task?</h3>\n            <form id=\'formScarlettTasks\' name=\'formScarlettTasks\' @click=\'changeTypeOfPaste($event)\'>\n              <input id=\'inputGenericCoupons\' type=\'radio\' name=\'inputCouponsSelect\' value=\'genericCoupons\'>\n              <label for=\'inputGenericCoupons\'>Manual Coupons</label> |\n\n              <input id=\'inputLinkbaseCoupons\' type=\'radio\' name=\'inputCouponsSelect\' value=\'linkbaseCoupons\'>\n              <label for=\'inputLinkbaseCoupons\'>Linkbase coupons</label> <br>\n\n              <input id=\'inputAirplaneTickets\' type=\'radio\' name=\'inputCouponsSelect\' value=\'airplaneTickets\'>\n              <label for=\'inputAirplaneTickets\'>Tickets</label> |\n\n              <input id=\'inputInvoices\' type=\'radio\' name=\'inputCouponsSelect\' value=\'invoices\'>\n              <label for=\'inputInvoices\'>Invoices</label>\n            </form>\n          </div> -->\n\n\n\n\n          <div id=\'divTextArea\'>\n            <h3>Paste the JSON file</h3>\n            <textarea\n            name=\'textareaCoupons\'\n            id=\'textareaCoupons\'\n            rows=\'10\' cols=\'80\'\n            placeholder=\'Paste JSON text here\'\n            v-model=\'startStr\'\n            v-once\n            ></textarea>\n          </div>\n\n\n\n\n          <div id=\'divFilterArea\'>\n            <h3>Filters</h3>\n            <h6>RegEx source:</h6>\n            <input type=\'text\' name=\'\' value=\'\'\n            v-model=\'regExSource\'\n            placeholder=\'Enter RegEx string\'\n            >\n\n            <h6>RegEx flags:</h6>\n            <template class=\'\'>\n              <label for=\'inputRegExg\' title=\'global: Don\'t return after first match\'>\n                g: <input id=\'inputRegExg\' type=\'checkbox\' value=\'g\' v-model=\'g\'>\n              </label>\n              <label for=\'inputRegExm\' title=\'multi line: ^ and $ match start / end of line\'>\n                m: <input id=\'inputRegExm\' type=\'checkbox\' value=\'m\' v-model=\'m\'>\n              </label>\n              <label for=\'inputRegExi\' title=\'insensitive: Case insensitive match\'>\n                i: <input id=\'inputRegExi\' type=\'checkbox\' value=\'i\' v-model=\'i\'>\n              </label>\n              <label for=\'inputRegExx\' title=\'extended: ignore whitespace\'>\n                x: <input id=\'inputRegExx\' type=\'checkbox\' value=\'x\' v-model=\'x\'>\n              </label>\n              <label for=\'inputRegExX\' title=\'extra: Disallow meaningless escapes\'>\n                X: <input id=\'inputRegExX\' type=\'checkbox\' value=\'X\' v-model=\'X\'>\n              </label>\n              <label for=\'inputRegExs\' title=\'single line: Dot matches newline\'>\n                s: <input id=\'inputRegExs\' type=\'checkbox\' value=\'s\' v-model=\'s\'>\n              </label>\n              <label for=\'inputRegExu\' title=\'unicode: Match with full unicode\'>\n                u: <input id=\'inputRegExu\' type=\'checkbox\' value=\'u\' v-model=\'u\'>\n              </label>\n              <label for=\'inputRegExU\' title=\'ungreedy: Make quantifiers lazy\'>\n                U: <input id=\'inputRegExU\' type=\'checkbox\' value=\'U\' v-model=\'U\'>\n              </label>\n              <label for=\'inputRegExA\' title=\'Anchored: Anchor to start of pattern\'>\n                A: <input id=\'inputRegExA\' type=\'checkbox\' value=\'A\' v-model=\'A\'>\n              </label>\n              <label for=\'inputRegExj\' title=\'jchanged: Allow duplicate subpattern\'>\n                j: <input id=\'inputRegExj\' type=\'checkbox\' value=\'j\' v-model=\'j\'>\n              </label>\n              <label for=\'inputRegExD\' title=\'Dollar end only: $ matches only end of pattern\'>\n                D: <input id=\'inputRegExD\' type=\'checkbox\' value=\'D\' v-model=\'D\'>\n              </label>\n            </template>\n            <hr>\n\n            <h6>Number of characters in description:</h6>\n            Min: <input type=\'text\' name=\'\' value=\'\'\n            maxlength=\'4\' size=\'4\'\n            v-model=\'minCharacters\' placeholder=\'0\'>\n            Max: <input type=\'text\' name=\'\' value=\'\'\n            maxlength=\'4\' size=\'4\'\n            v-model=\'maxCharacters\' placeholder=\'0\'>\n            <hr>\n\n\n          </div>\n        </section>\n\n\n        <section id=\'sectionDebugArea\' style=\'display: none;\'>\n          <h1>startStr</h1>\n          <p style=\'white-space: pre\'>{{startStr}}</p>\n          <h1>magic</h1>\n          <p style=\'white-space: pre\'>{{magic}}</p>\n        </section>\n\n\n\n        <section id=\'sectionExtractionArea\'>\n          <article\n          class=\'media\'\n          v-for=\'(item, idx) in mainArray\'\n          v-show=\'(regExSource === \'\' || item.description.match(new RegExp(regExSource, regExFlags))) &&\n          (minCharacters === \'\' || item.description.length >= minCharacters) &&\n          (maxCharacters === \'\' || item.description.length <= maxCharacters)\'\n          >\n\n            <div class=\'media-left media-middle\'>\n              <a :href=\'item.url\' target=\'_blank\'>\n                <img class=\'media-object\' :src=\'item.imageUrl\' alt=\'No image pulled for this item\'>\n              </a>\n            </div>\n\n            <div class=\'media-body\'>\n              <h2>{{item.description}}</h2>\n              <ul>\n                <li>Currency and price: {{item.priceCurrency}} {{item.offerPrice}}</li>\n                <li>Valid through: {{item.validThrough}}</li>\n                <li>Original price: {{item.originalPrice}}</li>\n                <li>Valid from: {{item.validFrom}}</li>\n                <li>Organization: {{item.organization}}</li>\n                <li>url: <a :href=\'item.url\' :title=\'item.url\'>Link - Think before you click!</a></li>\n              </ul>\n            </div>\n\n          </article>\n\n        </section>\n\n\n      </main>\n\n      <footer id=\'footerArea\'>\n        Copy Paste JSON |\n        <a href=\'http://addeventlistener.xyz\' target=\'_blank\'>@papostolopoulos</a> |\n        2018\n      </footer>\n    </div> <!-- End of main and footer -->\n\n  </body>\n\n\n\n\n  <script>\n  var app = new Vue({\n    el: \'#container\',\n    data: {\n      startStr: \'\',\n      typeOfPaste: \'\',\n      regExSource: \'\',\n      minCharacters: \'\',\n      maxCharacters: \'\',\n      g: \'\',\n      m: \'\',\n      i: \'\',\n      x: \'\',\n      X: \'\',\n      s: \'\',\n      u: \'\',\n      U: \'\',\n      A: \'\',\n      j: \'\',\n      D: \'\',\n      mainArray: []\n  }, //End of data\n  methods:{\n    changeTypeOfPaste: function(event) {  //this is for the radio buttons\n      this.typeOfPaste = event.target.value;\n    },\n    matchString: function(event) {\n      console.log(this.regExSource);\n      this.regExSource = event.target.value;\n      console.log(this.regExSource);\n    }\n  }, //End of methods\n  computed: {\n    regExFlags: function() {\n      let flags = \'gmixXsuUAjD\';\n      let flagStr = \'\';\n      for (var i = 0; i < flags.length; i++) {\n        if(this[flags[i]] === true) flagStr += flags[i]\n      }\n      return flagStr;\n    },\n    magic: function() {\n\n      // 1. Clean up the mainArray where all the object elements will be pasted\n      this.mainArray = [];\n\n\n\n      //2. remove unecessary symbols and text\n      var replacements = [\n        {oldStr:/[\@\\'\\'\[\]\{\}]/g, newStr:\'\'},\n        {oldStr:/graph:\s+/, newStr:\'\'},\n        {oldStr:/id:\s_:[\w-]+,\s+/g, newStr:\'\'},\n        {oldStr:/type:\s[A-z}]+,\s+/g, newStr:\'\'},\n        {oldStr:/\s+,/g, newStr:\',\'},\n        // {oldStr:/image:\s+url:\s+value/g, newStr:\'~~~imageUrl\'},\n        {oldStr:/image:\s+url(:\s+value)?/g, newStr:\'~~~imageUrl\'}, //This is for linkbase and generic. The above line only generic. You can remove it if both are working\n        {oldStr:/url:\s+(value)?/g, newStr:\'~~~url\'}, //both generic and linkbased (value parameter is included in generic)\n        {oldStr:/broker:\s+name/g, newStr:\'SPLIT~~~organization\'},\n        {oldStr:/description/g, newStr:\'~~~description\'},\n        {oldStr:/offerPrice:\s+value/g, newStr:\'~~~offerPrice\'},\n        {oldStr:/originalPrice:\s+value/g, newStr:\'~~~originalPrice\'},\n        {oldStr:/priceCurrency/g, newStr:\'~~~priceCurrency\'},\n        {oldStr:/validFrom/g, newStr:\'~~~validFrom\'},\n        {oldStr:/validThrough/g, newStr:\'~~~validThrough\'},\n        {oldStr:/,\s+SPLIT~~~/g, newStr:\'SPLIT~~~\'},\n        {oldStr:/,\s+~~~/g, newStr:\'~~~\'},\n        {oldStr:/http:\/\/schema\.org\/([A-z]+)?,\s/g, newStr:\'\'},\n        {oldStr:/id:\s+container:\sset,?\s+/g, newStr:\'\'},\n        {oldStr:/\s+vocab:/g, newStr:\'\'},\n        {oldStr:/\s+graph:/g, newStr:\'\'},\n        {oldStr:/,\s+context:\s+identifier:\s+contactPoint:\s+category:\s+sameAs:/g, newStr:\'\'},\n      ];\n\n\n      for(var el of replacements){\n        this.startStr = this.startStr.replace(el.oldStr, el.newStr);\n      }\n\n      this.startStr = this.startStr.trim();\n\n\n      // 4. Create an array from the existing string. Remove first element\n      this.startStr = this.startStr.slice(0, this.startStr.length-1).split(\'SPLIT\');\n      if(this.startStr[0] === \'\') this.startStr.shift();\n\n\n\n\n      //5. Evaluate the text of each element. Slice the text wherever needed and\n      // create an object that will be pushed to the mainArray.\n      var self = this;\n      this.startStr.forEach(function(el) {\n\n\n        //Create new object with all the expected keys for rendering in the page.\n        var newObj = {\n          organization: \'\',\n          description: \'\',\n          imageUrl: \'\',\n          url: \'\',\n          offerPrice: \'\',\n          originalPrice: \'\',\n          priceCurrency: \'\',\n          validFrom: \'\',\n          validThrough: \'\'\n        }\n\n        //Find the match of the key inside the element and slice\n        for(var key in newObj){\n          if (el.indexOf(key) !== -1) {\n            newObj[key] = el.slice(el.indexOf(key));\n            newObj[key] = newObj[key]\n            .replace(/~~~.*/,\'\')\n            .replace([key]+\': \', \'\')\n            .trim();\n            if (newObj[key][newObj[key].length - 1] === \',\') newObj[key].slice(0, newObj[key].length - 2);\n          }\n        }\n\n        self.mainArray.push(newObj);\n\n      });\n\n      return this.mainArray;\n\n\n    } //End of magic function\n  } //end of computed properties\n});\n\n  </script>\n\n</html>\n"}
