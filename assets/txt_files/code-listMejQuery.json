{"code": "var express = require(\"express\");\nvar router = express.Router();\nvar bcrypt = require(\"bcrypt\");\nvar knex = require(\"../db/knex\");\n\n//Log In POST\nrouter.post(\"/login\", function(req, res, next) {\n  console.log(req.body);\n\n  knex(\"users\")\n  .select()\n  .where(\"email\", req.body.email)\n  .returning(\"*\")\n  .then(function (existingUsers) {\n    var user = existingUsers[0];\n    if (existingUsers.length === 0) {\n      console.log(user);\n      res.render(\"error\", {\n        message: \"User does not exist\",\n        status: 400,\n        description: \"Sorry but the email you entered does not exist in the database. Please try to log in with a different email or try to sign up.\",\n        user: req.session.user || \"guest\"\n      });\n    } else {\n      if (bcrypt.compareSync(req.body.password, user.hashed_password) === true) {\n        console.log(\"Hoorah!!!\");\n        req.session.user = req.body.email;\n        req.session.cookie.maxAge = 24 * 60 * 60 * 10;\n        knex\n        .select(\"list.name\", \"list.id\", \"users.id\", \"users.email\")\n        .table(\"list\")\n        .innerJoin(\"users\", \"list.user_id\", \"users.id\")\n        .where({email: req.session.user})\n        .returning(\"*\")\n        .then(function (listTitles) {\n          res.render(\"lists\",{\n            listTitles: listTitles,\n            email: listTitles.email,\n            user: req.session.user || \"guest\"\n          })\n        })\n      }\n      else {\n        console.log(\"POOP!\");\n        res.render(\"error\", {\n          message: \"Incorrect Login Credentials\",\n          status: 400,\n          description: \"You have entered incorrect login credentials\",\n          user: req.session.user || \"guest\"\n        })\n      }\n\n\n    }\n  });\n}); //End of router.post\n\n\n//Sing up POST\nrouter.post(\"/signup\", function(req, res, next) {\n  console.log(req.body);\n\n  knex(\"users\")\n  .select()\n  .where(\"email\", req.body.email)\n  .returning(\"*\")\n  .then(function (existingUsers) {\n    if (existingUsers.length &gt; 0) {\n      var existingUser = existingUsers[0];\n      console.log(existingUser);\n      res.render(\"error\", {\n        message: \"User already exists\",\n        status: 400,\n        description: \"Sorry but the email you entered exists already in the database. Please try siging up with a different email or try to login.\",\n        user: req.session.user || \"guest\"\n      });\n    }\n  })\n\n  var hashedPassword = new Promise(function (resolve, reject) {\n    resolve(saltPassword(req.body.password));\n  })\n\n  hashedPassword\n  .then(function(pwd){\n    var newUserObj = {\n      email: req.body.email,\n      hashed_password: pwd\n    }\n    return newUserObj;\n  })\n  .then(function (newUser) {\n\n    knex(\"users\")\n    .insert(newUser)\n    .returning(\"email\")\n    .then(function(newUserEmails){\n      var newUserEmail = newUserEmails[0];\n      req.session.user = newUserEmail;\n      req.session.cookie.maxAge = 24 * 60 * 60 * 10;\n      res.render(\"lists\", {\n        user: req.session.user\n      });\n    })\n  })\n\n});\n\n//LOGOUT BUTTON\nrouter.get(\"/logout\", (req, res, next) =&gt; {\n  console.log(\"LOGOUT: req session before logout\");\n  console.log(req.session);\n  req.session.destroy(function (err) {\n      res.render(\"index\", {\n        title: \"listMe.xyz\",\n        user: \"guest\"\n      });\n  });\n  console.log(\"LOGOUT: req session after logout\");\n  console.log(req.session);\n});\n\n\n\n/* GET home page. */\nrouter.get(\"/\", function(req, res, next) {\n  res.render(\"index\", {\n    title: \"listMe.xyz\",\n    user: req.session.user || \"guest\"\n  });\n});\n\n//FUNCTIONS FOR PASSWORD HASHING\n\n//Salt of password\nfunction saltPassword(passwordEntry) {\n  var salt = bcrypt.genSaltSync(10);\n  console.log(\"The salt is:\", salt);\n  return hashPassword(passwordEntry, salt);\n}\n\nfunction hashPassword(passwordEntry, salt) {\n  var hash = bcrypt.hashSync(passwordEntry, salt);\n  console.log(\"The hash is:\", hash);\n  return hash;\n}\n\nmodule.exports = router;"}
