{\"code\": \"<!DOCTYPE html>\n<html lang=\"en\" dir=\"ltr\">\n  <head>\n    <link rel=\"icon\"\n      type=\"image/png\"\n      href=\"favicon.ico\">\n    <meta charset=\"utf-8\">\n    <link href=\"https://fonts.googleapis.com/css?family=Montserrat&display=swap\" rel=\"stylesheet\">\n    <link rel=\"stylesheet\" href=\"https://use.fontawesome.com/releases/v5.2.0/css/all.css\" integrity=\"sha384-hWVjflwFxL6sNzntih27bfxkr27PmbbK/iSvJ+a4+0owXq79v+lsFkW54bOGbiDQ\" crossorigin=\"anonymous\">\n    <title>How Performant - Test the performance of JavaScript functions</title>\n    <!-- <script src=\"https://cdn.jsdelivr.net/npm/vue/dist/vue.js\"></script> -->\n    <script src=\"vue.js\"></script>\n\n    <style media=\"screen\">\n      *{\n        margin: 0;\n        padding: 0;\n        box-sizing: border-box;\n        font-family: sans-serif;\n      }\n\n      body{\n        background-color: rgb(227, 114, 34); /*tangerine e37222*/\n      }\n\n      h1{\n        font-size: 2em;\n        font-family: \"Montserrat\", sans-serif;\n      }\n\n      #container{\n        display: grid;\n        grid-template-columns: 100%;\n        grid-template-rows: 7vh 89vh 4vh;\n        grid-template-areas:\n        \"header\"\n        \"main\"\n        \"footer\";\n      }\n\n      #header{\n        grid-area: header;\n        display: flex;\n        flex-direction: column;\n        height: 100%;\n        justify-content: center;\n        align-items: center;\n        background-color: rgb(227, 114, 34); /*tangerine e37222*/\n        color: rgba(255, 255, 255, .8);\n        border-bottom: 2px solid rgb(7, 136, 155); /*teal 07889b*/\n\n      }\n\n      .title{\n        font-family: \"Montserrat\", sans-serif;\n        font-size: 2em;\n        font-variant: small-caps;\n\n      }\n\n      .subtitle{\n        font-size: .8em;\n        font-weight: bold;\n      }\n\n      #main{\n        display: grid;\n        grid-template-columns: 33.3% 66.6%;\n        grid-template-rows: 100%;\n        grid-template-areas:\n        \"sectionPasteParams sectionPasteFunctions\"\n        \"sectionPasteParams sectionPasteFunctions\";\n        grid-area: main;\n      }\n\n      .sectionPasteParams{\n        padding: 0 10px 10px 10px;\n        grid-area: sectionPasteParams;\n        overflow: auto;\n        background-color: rgb(102, 185, 191); /*powder 66b9bf*/\n        color: rgba(255, 255, 255, .8);\n        border-right: 2px solid rgb(7, 136, 155); /*teal 07889b*/\n        border-left: 2px solid rgb(7, 136, 155); /*teal 07889b*/\n      }\n\n      .divNumOfArgumentsSets{\n        position: sticky;\n        top: 0;\n        background-color: rgb(102, 185, 191); /*powder 66b9bf*/\n      }\n\n      .divNumOfArgumentsSets hr{\n        border: 3px solid rgb(7, 136, 155); /*teal 07889b*/\n        margin-top: 10px;\n      }\n\n      .divInputNumOfArguments{\n        display: flex;\n        justify-content: center;\n      }\n\n      #inputNumOfArgumentsSets{\n        width: 80px;\n        text-align: center;\n        font-size: 1.5em;\n        border: 2px solid rgb(7, 136, 155); /*teal 07889b*/\n        color: rgb(7, 136, 155); /*teal 07889b*/\n        padding: 5px 5px 5px 20px;\n      }\n\n      #inputNumOfArgumentsSets:focus{\n        background-color: rgb(206, 247, 253);/*90% from teal 07889b*/\n        color: rgb(7, 136, 155); /*teal 07889b*/\n        outline: none;\n      }\n\n      #inputNumOfArgumentsSets:hover{\n        cursor: pointer;\n      }\n\n      .divDataTypeContainer{\n        display: flex;\n        flex-wrap: wrap;\n      }\n\n      .divFunctionArgument{\n        margin-top: 10px;\n        border-bottom: 1px solid rgb(7, 136, 155); /*teal 07889b*/\n        padding-bottom: 10px;\n      }\n\n      .textAreaArgumentsPaste{\n        width: 100%;\n        height: 10vh;\n        padding: 5px;\n        margin-top: 5px;\n        font-size: 0.8em;\n        color: rgb(7, 136, 155); /*teal 07889b*/\n        outline: none;\n        border: 1px solid rgb(7, 136, 155); /*teal 07889b*/\n      }\n\n      .textAreaArgumentsPaste:focus{\n        background-color: rgb(206, 247, 253);/*90% from teal 07889b*/\n      }\n\n      .divLabelDataTypeSingle{\n        display: flex;\n        align-items: center;\n      }\n\n      .labelArgumentsDataTypes{\n        margin-right: 10px;\n        height: 30px;\n        line-height: 30px;\n        position: relative;\n      }\n\n      .labelArgumentsDataTypes:hover{\n        cursor: pointer;\n        color: rgb(7, 136, 155); /*teal 07889b*/\n      }\n\n      .labelArgumentsDataTypes:hover .spanFakeRadio{\n        background-color: rgb(7, 136, 155);\n      }\n\n      .labelArgumentsDataTypes:active{\n        color: rgb(227, 114, 34); /*tangerine e37222*/;\n      }\n\n      .labelArgumentsDataTypes:active .spanFakeRadio{\n        background-color: rgb(227, 114, 34); /*tangerine e37222*/;\n      }\n\n      input[name*=\"inputRadioDataType\"]{\n        position: absolute;\n        opacity: 0;\n      }\n\n      input[name*=\"inputRadioDataType\"]:checked + span + span{\n        color: rgb(7, 136, 155); /*teal 07889b*/;\n      }\n\n      input[name*=\"inputRadioDataType\"]:checked + span{\n        background-color: rgb(7, 136, 155); /*teal 07889b*/;\n      }\n\n      input[name*=\"inputRadioDataType\"]:checked + span:after{\n        display: block;\n      }\n\n      .spanFakeRadio{\n        position: absolute;\n        top: 5px;\n        left: 0;\n        height: 20px;\n        width: 20px;\n        background-color: rgba(255, 255, 255, .8);\n        border-radius: 50%;\n        border: 1px solid rgb(7, 136, 155); /*teal 07889b*/\n      }\n\n      .spanFakeRadio:after{\n        content:\"\";\n        position: absolute;\n        display: none;\n        top: 5px;\n      	left: 5px;\n      	width: 8px;\n      	height: 8px;\n      	border-radius: 50%;\n      	background-color: rgba(255, 255, 255, .8);\n      }\n\n      .spanFakeRadio:hover{\n        background-color: rgb(7, 136, 155); /*teal 07889b*/\n      }\n\n      .spanFakeRadio:active{\n        background-color: rgb(227, 114, 34); /*tangerine e37222*/;\n      }\n\n      .spanRadioExplanation{\n        padding-left: 25px;\n      }\n\n      input:hover{\n        cursor: pointer;\n      }\n\n      .divErrorEntry{\n        padding-top: 10px;\n        color: rgba(128, 0, 0, .8);\n      }\n\n      .sectionPasteFunctions{\n        grid-area: sectionPasteFunctions;\n        display: flex;\n        align-content: center;\n        justify-content: center;\n        height: 90vh;\n      }\n\n      .sectionFunction1, .sectionFunction2{\n        width: 50%;\n        padding: 0 10px 10px 10px;\n        height: 90vh;\n        color: rgba(255, 255, 255, .8);\n        transition: width 2s, padding 2s;\n      }\n\n      .sectionFunction1{\n        overflow: auto;\n        background-color: rgb(238, 170, 123) /*tan eeaa7b*/;\n        border-right: 2px solid rgb(227, 114, 34); /*tangerine e37222*/\n      }\n\n      .sectionFunction1Expanded{\n        width: 100%;\n      }\n\n      .sectionFunction2Shrank{\n        width: 0;\n        padding: 0;\n      }\n\n      .sectionFunction2{\n        overflow: auto;\n        background-color: rgb(238, 170, 123) /*tan*/;\n      }\n\n      .divFunctionPasteArea{\n        position: sticky;\n        top: 0;\n        height: 180px;\n        margin-bottom: 80px;\n      }\n\n      #divFunction1HeaderContainer{\n        display: grid;\n        grid-template-columns: 93% 7%;\n        grid-template-rows: 100%;\n        grid-template-areas:\n        \"header1 arrow\";\n      }\n\n      .divFunction1Header{\n        grid-area: header1;\n      }\n\n      .divFunction1Arrow{\n        grid-area: arrow;\n        display: flex;\n        align-items: center;\n        justify-content: center;\n        transition: transform 2s;\n      }\n\n      .divFunction1Arrow:hover{\n        cursor: pointer;\n      }\n\n      .divFunction1ArrowRotated{\n        transform: rotate(-180deg);\n      }\n\n      .textAreaFunctionPaste{\n        width: 100%;\n        height: 100%;\n        padding: 5px;\n        font-size: 0.8em;\n        outline: none;\n        border: 2px solid rgb(227, 114, 34); /*tangerine e37222*/\n        color: rgb(227, 114, 34); /*tangerine e37222*/\n      }\n\n      .textAreaFunctionPaste:focus{\n        background-color: rgb(249, 226, 210) /*80% of tangerine e37222*/\n      }\n\n      .buttonTestFunction{\n        font-size: 1.2em;\n        padding: 5px;\n        margin-bottom: 10px;\n        border: 2px solid rgb(227, 114, 34); /*tangerine e37222*/;\n        color: rgb(227, 114, 34); /*tangerine e37222*/;\n        outline: none;\n      }\n\n      .buttonTestFunction:hover{\n        background-color: rgb(227, 114, 34); /*tangerine e37222*/;\n        color: rgba(255, 255, 255, .8);\n        cursor: pointer;\n      }\n\n      .buttonTestFunction:active{\n        background-color: rgb(102, 185, 191); /*powder 66b9bf*/\n        border: 2px solid rgb(7, 136, 155); /*teal 07889b*/\n        color: rgba(255, 255, 255, .8);\n        cursor: pointer;\n      }\n\n      .divFunctionErrorAlertArea{\n        padding-top: 10px;\n        color: rgba(128, 0, 0, .8);\n      }\n\n      .divFunctionResultsArea{\n        overflow: auto;\n        padding: 15px 0 0 0;\n        font-size: 1em;\n        margin: 0;\n        transition: font-size 1s, margin 1s;\n      }\n\n      .divFunctionResultsArea:hover{\n        font-size: 1.3em;\n        margin: 0 -10px;\n        z-index:1;\n      }\n\n      .divFunctionResultsArea hr{\n        border: 1px solid rgba(255, 255, 255, .8);\n        margin-top: 5px;\n      }\n\n      .divFunctionResultsArea:nth-child(even){\n        background-color: rgb(243, 197, 165); /*80% of tan eeaa7b*/\n      }\n\n      .spanOutput, .spanMs{\n        display: block;\n        padding-left: 10px;\n      }\n\n      .spanOutput b, .spanMs b{\n        color: rgb(227, 114, 34); /*tangerine e37222*/\n      }\n\n      #footer{\n        background-color: rgb(227, 114, 34); /*tangerine e37222*/\n        grid-area: footer;\n        line-height: 4vh;\n        text-align: center;\n        font-size: 1.2rem;\n        color: rgba(255, 255, 255, .8);\n        border-top: 2px solid rgb(7, 136, 155); /*teal 07889b*/\n        font-family: \"Montserrat\", sans-serif;\n      }\n\n      #footer a{\n        color: rgba(255, 255, 255, .8);\n      }\n\n      #footer a:hover{\n        color: rgba(255, 255, 255);\n      }\n    </style>\n  </head>\n  <body>\n    <div id=\"container\">\n      <header id=\"header\">\n        <div class=\"title\">\n          How Performant?\n        </div>\n        <div class=\"subtitle\">\n          Compare JavaScript Functions - See their execution time\n        </div>\n      </header>\n      <main id=\"main\">\n        <section class=\"sectionPasteParams\">\n          <div class=\"divNumOfArgumentsSets\">\n            <h1>Function arguments</h1>\n            <div class=\"divInputNumOfArguments\">\n              <label class=\"labelNumOfArgumentsSets\">\n                Number of function arguments:\n                <input type=\"number\"\n                name=\"inputNumOfArgumentsSets\"\n                id=\"inputNumOfArgumentsSets\"\n                v-model=\"numOfArgumentsSets\"\n                @change=\"changeArgumentsArrLength($event)\"\n                @keyup=\"changeArgumentsArrLength($event)\"\n                min=\"0\"\n                max=\"10\"\n                width=\"2\"\n                >\n              </label>\n              <!-- <div class=\"divNumOfArgumentsError\" v-show=\"numOfArgumentsError\">\n                The error goes here and it looks really good\n              </div> -->\n            </div>\n\n            <hr>\n            <!-- <p>\n              Paste your arguments in the following slots.\n              One data type per slot.\n              If you want to run your function multiple times and with different\n              arguments each time then paste them in the same slot with a line break.\n              If a different amount of arguments is going to be pasted on each slot,\n              then the function will be run as many times as the slot with the most\n              arguments pasted. In order to match the difference between arguments,\n              then there will be an iteration of the less arguments in the final\n              function invocations.\n            </p> -->\n          </div>\n\n\n\n          <div class=\"divArgumentsSets\" v-for=\"set in Number(numOfArgumentsSets)\">\n            <function-arg :id=\"\'argSet\' + set\"></function-arg>\n          </div>\n\n        </section>\n\n\n\n        <section class=\"sectionPasteFunctions\">\n          <section class=\"sectionFunction1\"\n          :class=\"{\'sectionFunction1Expanded\': expandSectionFunction1}\"\n          >\n            <div class=\"divFunctionPasteArea\">\n              <div class=\"divFunctionHeading\" id=\"divFunction1HeaderContainer\">\n                <div class=\"divFunction1Header\">\n                  <h1>Function 1</h1>\n                </div>\n                <div class=\"divFunction1Arrow\"\n                :class=\"{\'divFunction1ArrowRotated\': function1ArrowRotate}\"\n                @click=\"adjustFunction1Field($event)\"\n                >\n                  <i class=\"fas fa-arrow-alt-circle-right fa-2x\"></i>\n                </div>\n              </div>\n              <textarea\n              id=\"textAreaFunction1\"\n              v-model=\"function1String\"\n              name=\"textAreaFunction1\"\n              class=\"textAreaFunctionPaste\"\n              placeholder=\"Type or paste your function in this field\"\n              ></textarea>\n              <button type=\"button\" name=\"button\" class=\"buttonTestFunction\" @click=\"testFunctionPerformance()\">test function</button>\n              <div class=\"divFunctionMS\">\n                <h3>Total milliseconds for all functions: {{function1Totalms.toFixed(2)}}</h3>\n              </div>\n              <div class=\"divFunctionErrorAlertArea\" v-show=\"function1Error\">\n                {{function1ErrorMessage}}\n              </div>\n              <div class=\"divFunctionResultsArea\"\n              v-for=\"result in function1Result\">\n              <span class=\"spanOutput\">\n                <b>Output:</b>\n                <span>{{result.output}}</span>\n              </span>\n              <span class=\"spanMs\">\n                <b>ms:</b>\n                <span>{{result.ms}}</span>\n              </span>\n              <hr>\n              </div>\n            </div>\n\n\n          </section>\n\n\n\n          <section class=\"sectionFunction2\"\n          :class=\"{\'sectionFunction2Shrank\': shrinkSectionFunction2}\"\n          >\n            <div class=\"divFunctionPasteArea\">\n              <h1>Function 2</h1>\n              <textarea\n              id=\"textAreaFunction2\"\n              v-model=\"function2String\"\n              name=\"textAreaFunction2\"\n              class=\"textAreaFunctionPaste\"\n              placeholder=\"Type or paste your function in this field\"\n              ></textarea>\n              <button type=\"button\" name=\"button\" class=\"buttonTestFunction\" @click=\"testFunctionPerformance()\">test function</button>\n              <div class=\"divFunctionMS\">\n                <h3>Total milliseconds for all functions: {{function2Totalms.toFixed(2)}}</h3>\n              </div>\n              <div class=\"divFunctionErrorAlertArea\" v-show=\"function2Error\">\n                {{function2ErrorMessage}}\n              </div>\n              <div class=\"divFunctionResultsArea\"\n              v-for=\"result in function2Result\">\n              <span class=\"spanOutput\">\n                <b>Output:</b>\n                <span>{{result.output}}</span>\n              </span>\n              <span class=\"spanMs\">\n                <b>ms:</b>\n                <span>{{result.ms}}</span>\n              </span>\n              <hr>\n              </div>\n            </div>\n          </section>\n        </section>\n\n\n      </main>\n\n      <footer id=\"footer\">\n        <a href=\"http://addeventlistener.xyz\" target=\"_blank\">@papostolopoulos</a> |\n        September 2019\n      </footer>\n    </div>\n\n\n\n\n\n\n    <script type=\"text/javascript\">\n\n//----Vue component----\n      Vue.component(\'function-arg\', {\n        props: [\"set\"],\n        data(){\n          return {\n            errorEntry: false,\n            dataType: \"string\",\n            textAreaValues: \"\",\n            arrayElements: [],\n            objectElements: {}\n          }\n        },\n        methods:{\n          //takes all the values in the textArea and splits them on every line break\n          //Depending on the dataType selected, it converts them from string to the right\n          //data type. Then it returns an array of all the elements.\n          processTextAreaValues(){\n\n            console.log(\"In the start of the processTextAreaValues()\");\n            this.errorEntry = false;\n            let finalArr = [];\n            let startArr = this.textAreaValues.split(\"\n\");\n            console.log(`The array created after the split for iteration and evaluation is:`, startArr);\n\n\n            //If function selected\n            if (this.dataType === \"function\"){\n              console.log(\"selected data type = function\");\n              let functionsArr = this.textAreaValues.split(/(?<=\})\s*((?=function)|(?=(var|let|const)\s[A-z_\$]\w*\s*=\s*function))/);\n              console.log(\"the functionsArr is\", functionsArr);\n              for (let i = 0; i < functionsArr.length; i++) {\n                if (functionsArr[i] === \"\" || functionsArr[i] === undefined){\n                  functionsArr.splice(i, 1);\n                  i--;\n                }\n                else {\n                  console.log(\"Result from function selection before the evalFunction:\", functionsArr[i]);\n                  let evalFunctionProduct = this.evalFunction(functionsArr[i]);\n                  if (evalFunctionProduct === \"error\") {\n                    this.errorEntry = true;\n                    return;\n                  }\n                  finalArr.push(evalFunctionProduct);\n                }\n              }\n              return finalArr;\n            } //end of if for function\n\n            //If object selected\n            if (this.dataType === \"object\"){\n              console.log(\"selected dataType = object\");\n              let objectsArr = this.textAreaValues.split(/\n(?=\{)/);\n              for (let i = 0; i < objectsArr.length; i++) {\n                objectsArr[i][0] === \"{\" ? objectsArr[i] = objectsArr[i] : objectsArr[i] = \"{\" + objectsArr[i];\n                console.log(\"Result from function selection before the evalFunction:\", objectsArr[i]);\n                let evalObjectProduct = this.evalObject(objectsArr[i], this.objectElements);\n                if (evalObjectProduct === \"error\"){\n                  this.errorEntry = true;\n                  return;\n                }\n                else {\n                  this.objectElements = {};\n                  this.arrayElements = [];\n                  finalArr.push(evalObjectProduct);\n                } //End of else\n              }\n              return finalArr;\n            } //End of if object selected\n\n            //If string selected - Not sure about this - Need to see if I want to trigger alerts when string\n            //starts as an array or object or says true or false or starts with number etc\n            if (this.dataType === \"string\"){\n              let stringsArr = this.textAreaValues.split(/\n/);\n              console.log(\"selected dataType = string and stringsArr is\", stringsArr);\n\n              //Find if there are tildas (`) in the strings. That might mean sentences\n              //that are spanning to different lines so they need to be connected\n              let pairTildas = this.textAreaValues.replace(/[^`]/g, \"\").length % 2 === 0;\n              if (pairTildas) {\n                for (let j = 0; j < stringsArr.length; j++) {\n                  if (stringsArr[j][0] === \"`\" && stringsArr[j][stringsArr[j].length - 1] !== \"`\") {\n                    let replaceStr = stringsArr[j];\n                    let elemsCounter = 1;\n                    for (var k = j+1; k < stringsArr.length; k++) {\n                      replaceStr += stringsArr[k];\n                      elemsCounter += 1;\n                      if (stringsArr[k][stringsArr[k].length - 1] === \"`\") {\n                        stringsArr.splice(j, elemsCounter, replaceStr);\n                        break;\n                      }\n                    } //End of Second loop (k)\n\n                  }\n                } //End of first loop, j\n              } //End of if(pairTildas)\n\n              for (let i = 0; i < stringsArr.length; i++) {\n                let evalStringProduct = this.evalString(stringsArr[i]);\n                if (evalStringProduct === \"error\") {\n                  this.errorEntry = true;\n                  return;\n                }\n                finalArr.push(evalStringProduct);\n              }\n              return finalArr;\n            } //End of if this.dataType === string\n\n\n\n            for (let i = 0; i < startArr.length; i++) {\n              console.log(\"In the for loop for i:\", i, \"and startArr[i]:\", startArr[i]);\n\n              //If array selected\n              if (this.dataType === \"array\"){\n                console.log(\"selected data type: array\");\n                let evalArrayProduct = this.evalArray(startArr[i], this.arrayElements);\n                if(evalArrayProduct === \"error\"){\n                  this.errorEntry = true;\n                  return;\n                }\n                else {\n                  this.arrayElements = [];\n                  this.objectElements = {};\n                  finalArr.push(evalArrayProduct);\n                }\n              } //end of array being selected\n\n              //If boolean selected\n              if (this.dataType === \"boolean\"){\n                let evalBooleanProduct = this.evalBoolean(startArr[i]);\n                if (evalBooleanProduct === \"error\") {\n                  this.errorEntry = true;\n                  return;\n                }\n                 finalArr.push(evalBooleanProduct);\n              }\n              //If null selected\n              if (this.dataType === \"null\"){\n                let evalNullProduct = this.evalNull(startArr[i]);\n                if (evalNullProduct === \"error\") {\n                  this.errorEntry = true;\n                  return;\n                }\n                finalArr.push(evalNullProduct);\n              }\n              //If number selected\n              if (this.dataType === \"number\"){\n                let evalNumberProduct = this.evalNumber(startArr[i]);\n                if (evalNumberProduct === \"error\") {\n                  this.errorEntry = true\n                  return;\n                }\n                finalArr.push(evalNumberProduct);\n              }\n              //If regexp selected\n              if (this.dataType === \"regexp\"){\n                let evalRegExpProduct = this.evalRegExp(startArr[i]);\n                if (evalRegExpProduct === \"error\") {\n                  this.errorEntry = true;\n                  return;\n                }\n                finalArr.push(evalRegExpProduct);\n              }\n              //If undefined selected\n              if (this.dataType === \"undefined\"){\n                let evalUndefinedProduct = this.evalUndefined(startArr[i]);\n                if (evalUndefinedProduct === \"error\") {\n                  this.errorEntry = true;\n                  return;\n                }\n                finalArr.push(evalUndefinedProduct);\n              }\n            } //End of for loop\n\n            console.log(\"The array to be sent to the main component is:\", finalArr);\n\n            //Update the new data in the app component every time there is a change\n            //in the textArea or the radio buttons\n\n            // I AM CLOSING THE NEXT LINE AND I AM RETURNING FINAL ARRAY INSTEAD because\n            // THE ARRAY WILL BE PULLED FROM THE refreshArgumentsArr() that is in the MAIN\n            // vue component\n            // app.$data.argumentsArr[this.argIdNum - 1] = finalArr;\n            return finalArr;\n          }, //End of processTextAreaValues\n\n\n          //Evaluates if the array is properly structured\n          evalArray(arrStr, arr) {\n            if(arrStr === \"\") return;\n\n            console.log(\"Beginning of evalArray. arrStr is:\", arrStr, typeof arrStr);\n            if (arrStr === \"[]\"){\n              console.log(\"In if statement. arrStr is empty so we are returning \", arr);\n              let finishEval = arr.slice();\n              arr = [];\n              return finishEval;\n            }\n            else{ // if(/\[.+\]/.test(arrStr))\n              if (arrStr[0] !== \"[\" || arrStr[arrStr.length-1] !== \"]\"){\n                console.log(\"In the error because the first or the last character of the string do not indicate an array\");\n                return \"error\";\n              }\n              else {\n                console.log(\"In the else of the eval array. The arrStr before the slice:\", arrStr);\n                arrStr = arrStr.slice(1, arrStr.length-1);\n                console.log(\"In the else of the eval array. The arrStr after the slice:\", arrStr);\n                let es5FunctionRegEx = \"function\\s+[^0-9\\|°¬\\!#\\$%/\\(\\)\\?¡¿\\+\\{\\}\\[\\]:\\.\\,;@ª^\\*<>=\\&]*\\s*\\(([^\\|°¬\\!#\\$%/\\(\\)\\?¡¿\\+\\{\\}\\[\\]:\\.\\,;@ª^\\*<>=\\&]*,?\\s*)+\\)\\s*\\{.*\\}\";\n                let es6FunctionRegEx = \"\\(([^\\|°¬\\!#\\$%/\\(\\)\\?¡¿\\+\\{\\}\\[\\]:\\.\\,;@ª^\\*<>=\\&]*,?\\s*)+\\)\\s*=>\\s*\\{.*\\}\";\n\n                //Number\n                if(arrStr.search(/\d+(\.\d+)?,/) === 0 || arrStr.search(/\d+(\.\d+)?\s*$/) === 0) {\n                  console.log(\"else if for number to be pushed:\", Number(arrStr.match(/\d+(\.\d+)?/)[0]));\n                  arr.push(Number(arrStr.match(/\d+(\.\d+)?/)[0]));\n                  arrStr = arrStr.slice(arrStr.match(/\d+(\.\d+)?/)[0].length + 1);\n                  // arrStr = arrStr.slice(arrStr.indexOf(\",\") + 1);\n                  arrStr = arrStr.trim();\n                  console.log(\"end of else if with arrStr being:\", arrStr);\n                  return this.evalArray(\"[\" + arrStr + \"]\", arr);\n                }\n\n                //true\n                else if (arrStr.indexOf(\"true,\") === 0 || arrStr.search(/true\s*$/) === 0) {\n                  console.log(\"else if for true\");\n                  arr.push(true);\n                  arrStr = arrStr.slice(5);\n                  arrStr = arrStr.trim();\n                  return this.evalArray(\"[\" + arrStr + \"]\", arr);\n                }\n\n                //false\n                else if (arrStr.indexOf(\"false,\") === 0 || arrStr.search(/false\s*$/) === 0) {\n                  console.log(\"else if for false\");\n                  arr.push(false);\n                  arrStr = arrStr.slice(6);\n                  arrStr = arrStr.trim();\n                  return this.evalArray(\"[\" + arrStr + \"]\", arr);\n                }\n\n                //null\n                else if (arrStr.indexOf(\"null,\") === 0 || arrStr.search(/null\s*$/) === 0) {\n                  console.log(\"else if for null\");\n                  arr.push(null);\n                  arrStr = arrStr.slice(5);\n                  arrStr = arrStr.trim();\n                  return this.evalArray(\"[\" + arrStr + \"]\", arr);\n                }\n\n                //Undefined\n                else if (arrStr.indexOf(\"undefined,\") === 0 || arrStr.search(/undefined\s*$/) === 0) {\n                  console.log(\"else if for undefined\");\n                  arr.push(undefined);\n                  arrStr = arrStr.slice(10);\n                  arrStr = arrStr.trim();\n                  return this.evalArray(\"[\" + arrStr + \"]\", arr);\n                }\n\n                //string\n                else if (arrStr.search(/[\"\'`]/) === 0) {\n                  console.log(\"else if for string\");\n                  let firstQuote = arrStr[0];\n                  if (arrStr.indexOf(firstQuote + \",\") > 0) {\n                    arr.push(arrStr.substring(1, arrStr.indexOf(firstQuote + \",\")));\n                    arrStr = arrStr.slice(arrStr.indexOf(firstQuote + \",\") + 2);\n                    arrStr = arrStr.trim()\n                  }\n                  else if (arrStr.lastIndexOf(firstQuote) === arrStr.length-1) {\n                      arr.push(arrStr.substring(1, arrStr.length-1));\n                      arrStr = \"\";\n                  }\n                  return this.evalArray(\"[\" + arrStr + \"]\", arr);\n                }\n\n                //function es5 es6\n                else if (arrStr.search(RegExp(es5FunctionRegEx)) === 0 ||  arrStr.search(RegExp(es6FunctionRegEx)) === 0) {\n\n                  console.log(\"else if for function\");\n                  let params = arrStr.slice(arrStr.indexOf(\"(\") + 1, arrStr.indexOf(\")\")).split(/,\s*/);\n                  console.log(\"params are\", params);\n                  console.log(\"arrStr is\", arrStr.match(/function\s+[^0-9\|°¬\!#\$%/\(\)\?¡¿\+\{\}\[\]:.\,;@ª^\*<>=\&]*\s*\(([^\|°¬\!#\$%/\(\)\?¡¿\+\{\}\[\]:\.\,;@ª^\*<>=\&]*,?\s*)+\)\s*\{.*\}/));\n                  //If there is a function and separated by a comma with other array elements\n                  if(arrStr.search(RegExp(es5FunctionRegEx + \",\")) !== -1 ||\n                  arrStr.search(RegExp(es6FunctionRegEx + \",\")) !== -1){\n                    console.log(\"In if for functions\");\n                    params.push(arrStr.slice(arrStr.indexOf(\"{\") + 1, arrStr.indexOf(\"}, \")));\n                    arr.push(new Function(...params));\n                    arrStr = arrStr.slice(arrStr.indexOf(\"}, \") + 3).trim();\n                    console.log(\"arrStr is\", arrStr);\n                  }\n                  //if the function is the last element of the array\n                  else if ((RegExp(es5FunctionRegEx).test(arrStr) && arrStr.match(RegExp(es5FunctionRegEx))[0].length === arrStr.length) ||\n                  RegExp(es6FunctionRegEx).test(arrStr) && arrStr.match(RegExp(es6FunctionRegEx))[0].length === arrStr.length) {\n                    console.log(\"in else if for functions\");\n                    params.push(arrStr.slice(arrStr.indexOf(\"{\") + 1, arrStr.lastIndexOf(\"}\")));\n                    arr.push(new Function(...params));\n                    arrStr = \"\";\n                    console.log(arrStr);\n                  }\n                  return this.evalArray(\"[\" + arrStr + \"]\", arr);\n                }\n\n                //array\n                else if (arrStr.indexOf(\"[\") === 0){\n                  console.log(\"else if for array\");\n\n                  if (this.sliceArrObj(\"[\", \"]\", arrStr)) {\n                    let arrStrSubstring = arrStr.substring(0, this.sliceArrObj(\"[\", \"]\", arrStr));\n                    console.log(\"arrStrSubstring is\", arrStrSubstring);\n                    //Push in arr array the function for evaluating arrays or objects (recursively), with the related substring\n                    arr.push(this.evalArray(arrStrSubstring, []));\n\n                    //slice the arrayString at the level of the substring\n                    arrStr = arrStr.slice(this.sliceArrObj(\"[\", \"]\", arrStr) + 1);\n                    arrStr = arrStr.trim();\n                    return this.evalArray(\"[\" + arrStr + \"]\", arr);\n                  }\n                }\n\n                //object\n                else if (arrStr.indexOf(\"{\") === 0){\n                  console.log(\"else if for object\");\n\n                  if (this.sliceArrObj(\"{\", \"}\", arrStr)) {\n                    let arrStrSubstring = arrStr.substring(0, this.sliceArrObj(\"{\", \"}\", arrStr));\n                    console.log(\"arrStrSubstring is\", arrStrSubstring);\n                    //Push in arr array the function for evaluating objects, with the related substring\n                    arr.push(this.evalObject(arrStrSubstring, {}));\n\n                    //slice the arrayString at the level of the substring\n                    arrStr = arrStr.slice(this.sliceArrObj(\"{\", \"}\", arrStr) + 1);\n                    arrStr = arrStr.trim();\n                    return this.evalArray(\"[\" + arrStr + \"]\", arr);\n                  }\n                }\n\n                //There was no identification of any data type so error is returned\n                else {\n                  console.log(\"The data type was not matched\");\n                  return \"error\";\n                }\n              }\n            } //End of top else\n          }, //End of evalArray\n\n\n          //Evaluates if the Boolean is properly structured\n          evalBoolean(el){\n\n            if (el.trim() === \"true\") return true;\n            if (el.trim() === \"false\") return false;\n            if (el.trim() === \"\") return;\n            return \"error\";\n          },\n\n\n          //Evaluates if the function is properly structured\n          evalFunction(el){\n\n            el = el.trim();\n            console.log(\"In evalFunction. The el in the evaFunction is:\", el);\n            // console.log(event);\n\n            if (!el.startsWith(\"function\") ||\n            !el.search(/(var|let|const)\s[A-z_\$]\w*\s*=\s*\(([A-z_\$]\w*,?\s*)*\)\s*=>/ !== 0) ||\n            !el.endsWith(\"}\")) return \"error\";\n\n            let params = el.slice(el.indexOf(\"(\") + 1, el.indexOf(\")\")).split(/,\s*/);\n            params.push(el.slice(el.indexOf(\"{\") + 1, el.lastIndexOf(\"}\")));\n            console.log(\"The function parameters are:\", params);\n\n            return new Function(...params);\n          },\n\n\n          //Evaluates if the null is properly structured\n          evalNull(el){\n            if (el.trim() === \"\") return;\n            return el.trim() === \"null\" ? null : \"error\";\n          },\n\n\n          //Evaluates if the number is properly structured\n          evalNumber(el){\n\n            return isNaN(Number(el.trim())) ? \"error\" : Number(el);\n          },\n\n\n          //evaluates if the object is properly structured\n          evalObject(el, obj){\n            console.log(\"el is\", el);\n\n            el = el.trim();\n            if (el === \"{\") return;\n            if (el === \"{}\") return obj;\n\n            if (!el.startsWith(\"{\") || !el.endsWith(\"}\")) return \"error\";\n            console.log(\"In eval Object. el is\", el, \"Need to convert from string to object\");\n\n            //Put quotes in the keys of the object so it can pass the JSON.parse\n            //Put quotes in all the \"undefined\" as well\n            el = el\n            .replace(/([\{,])(\s*)(\w+)(\s*)(:)/g, \"$1$2\\"$3\\"$4$5\") //Add quotes at the start and the end of the keys\n            .replace(/(:\s+)(undefined)([,\n])/, \"$1\\"$2\\"$3\"); //put quotes around all the undefined\n            console.log(\"After the addition of quotations in the keys:\", el);\n\n            // IF THERE IS A FUNCTION AS A VALUE OF ONE OF THE OBJECT\'S PROPERTIES:\n            // 1. Create a variable that is pulling out all the functions from the obj.\n            // 2. replace unecessary text at the beginning and end of each element.\n            // 3. Replace all the double quotes to single quotes and replace all the line breaks\n            if ((/(:\s)(function\s*\((?:[^\|°¬\!#\$%/\(\)\?¡¿\+\{\}\[\]:\.\,;@ª^\*<>=\&]*,?\s*)*\)\s*\{[\S\s]+\})(,?\s)/g).test(el)) {\n              let functionStrings =\n              el\n              .match(/(:\s)(function\s*\((?:[^\|°¬\!#\$%/\(\)\?¡¿\+\{\}\[\]:\.\,;@ª^\*<>=\&]*,?\s*)*\)\s*\{[\S\s]+\})(,?\s)/g)\n              .map((ele) => ele.slice(ele.indexOf(\"function\"), ele.lastIndexOf(\"}\") + 1))\n              .map((elm) => elm.replace(/\"/g, \"\'\").replace(/\n/g, \"\"));\n              console.log(functionStrings);\n\n              //Replace all the function strings into \"A function goes here\"\n              el = el.replace(/(:\s)(function\s*\((?:[^\|°¬\!#\$%/\(\)\?¡¿\+\{\}\[\]:\.\,;@ª^\*<>=\&]*,?\s*)*\)\s*\{[\S\s]+\})(,?\s)/g, \"$1A function goes here$3\");\n\n              //Add all the functions back in the object as -cleaned- string formats\n              while (functionStrings.length > 0) {\n                el = el.replace(/A function goes here/, \'\"\' + functionStrings.shift() + \'\"\');\n              }\n            }\n\n\n            //Parse the string into an object\n            obj = JSON.parse(el);\n\n            for(let key in obj){\n              if (obj[key] === \"undefined\") obj[key] = undefined;\n              if (/function.*\}/.test(obj[key])) {\n                let params = obj[key].slice(obj[key].indexOf(\"(\") + 1, obj[key].indexOf(\")\")).split(/,\s*/);\n                params.push(obj[key].slice(obj[key].indexOf(\"{\") + 1, obj[key].lastIndexOf(\"}\")));\n\n                obj[key] = new Function(...params);\n              }\n\n              //What if the string is an array?\n            } //End of the for loop\n            return obj;\n          },\n\n\n          // evaluates if the regular expression is properly structured\n          evalRegExp(el){\n\n            el = el.trim();\n            if(el === \"\") return;\n            let elFlags = el.slice(el.lastIndexOf(\"/\") + 1);\n            let flags = \"igmsuy\";\n            let source = el.slice(1, el.lastIndexOf(\"/\"));\n            console.log(elFlags, flags, source);\n\n            //The last character is not a /\n            if (elFlags === 0 && el.length - 1 !== el.lastIndexOf(\"/\")) return \"error\";\n\n            //some of the flag characters are incorrect\n            if (elFlags.length > 0) {\n              for (var i = 0; i < elFlags.length; i++) {\n                if (!flags.includes(elFlags[i])) return \"error\";\n              }\n            }\n\n            //The first character is not a /\n            if (el[0] !== \"/\") return \"error\";\n\n            let sourceCheck = source.replace(/[^\(\)\[\]\{\}]/g, \"\");\n            console.log(sourceCheck);\n\n            while (sourceCheck.length > 0) {\n              if (/\[\]/.test(sourceCheck) || /\(\)/.test(sourceCheck) || /\{\{/.test(sourceCheck)) {\n                sourceCheck = sourceCheck.replace(/\[\]/, \"\").replace(/\(\)/, \"\").replace(/\{\}/, \"\");\n              }\n              else return \"error\";\n            }\n\n            return new RegExp(source, elFlags);\n          },\n\n\n          //Evaluates if the string is properly structured\n          evalString(el){\n\n            console.log(\"In the evalString method for el\", el);\n\n            //Get rid of extra quotation marks that might already exist at the input field\n            return el.replace(/^(?:[\"\'`]+)?(.*[^\"\'`])(?:[\"\'`]+)?\s*$/gm, \"$1\").trim();\n          },\n\n\n          //Evaluates if the undefined is properly structured\n          evalUndefined(el){\n            if(el === \"\") return;\n            return el === \"undefined\" ? undefined : \"error\";\n          },\n\n\n          //finds if the opening and closing brackets are structured correctly\n          //in an array or an object\n          sliceArrObj(openBrkt, closeBrkt, arr) {\n              let counter = 1;\n              let subStr = arr.slice(1);\n              for (let i = 0; i < subStr.length; i++) {\n                if(subStr[i] === openBrkt) counter++;\n                else if(subStr[i] === closeBrkt){\n                  counter--;\n                  if(counter === 0) return i+2;\n                }\n                else continue;\n              } //End of for loop for substring\n              return false;\n          },\n\n        }, //End of methods\n        computed: {\n          //Create the ID for the div tag that includes the arguments textArea\n          argIdNum(){\n            return this.$attrs.id.replace(/[A-z]/g, \"\");\n          },\n          // sendTextAreaValues(){\n          //   return processTextAreaValues();\n          // }\n\n        },\n        template:\n        `\n          <div class=\"divFunctionArgument\" :key=\"set\">\n            <h2>Argument {{argIdNum}}</h2>\n            <label class=\"labelArgumentsText\">\n              <textarea\n                class=\"textAreaArgumentsPaste\"\n                placeholder=\"Enter the function\'s argument.\nIf you are entering more than one options for the same argument type, separate them with a line break\"\n                v-model=\"textAreaValues\"\n                @keyup=\"processTextAreaValues($event.target.value)\">\n\n              </textarea>\n            </label>\n            <h4>Argument data type:</h4>\n            <div class=\"divLabelDataType\">\n              <form>\n                <div class=\"divDataTypeContainer\">\n                  <div class=\"divLabelDataTypeSingle\">\n                    <label class=\"labelArgumentsDataTypes\">\n                      <input type=\"radio\"\n                      class=\"inputRadioDataType\"\n                      name=\"inputRadioDataType\"\n                      value=\"array\" v-model=\"dataType\"\n                      @change=\"processTextAreaValues($event.target.value)\"\n                      >\n                      <span class=\"spanFakeRadio\"></span>\n                      <span class=\"spanRadioExplanation\">Array</span>\n                    </label>\n                  </div>\n                  <div class=\"divLabelDataTypeSingle\">\n                    <label class=\"labelArgumentsDataTypes\">\n                      <input type=\"radio\"\n                      class=\"inputRadioDataType\"\n                      name=\"inputRadioDataType\"\n                      value=\"boolean\"\n                      v-model=\"dataType\"\n                      @change=\"processTextAreaValues($event.target.value)\"\n                      >\n                      <span class=\"spanFakeRadio\"></span>\n                      <span class=\"spanRadioExplanation\">Boolean</span>\n                    </label>\n                  </div>\n                  <div class=\"divLabelDataTypeSingle\">\n                    <label class=\"labelArgumentsDataTypes\">\n                      <input type=\"radio\"\n                      class=\"inputRadioDataType\"\n                      name=\"inputRadioDataType\" value=\"null\"\n                      v-model=\"dataType\"\n                      @change=\"processTextAreaValues($event.target.value)\"\n                      >\n                      <span class=\"spanFakeRadio\"></span>\n                      <span class=\"spanRadioExplanation\">Null</span>\n                    </label>\n                  </div>\n                  <div class=\"divLabelDataTypeSingle\">\n                    <label class=\"labelArgumentsDataTypes\">\n                      <input type=\"radio\"\n                      class=\"inputRadioDataType\"\n                      name=\"inputRadioDataType\"\n                      value=\"number\" v-model=\"dataType\"\n                      @change=\"processTextAreaValues($event.target.value)\"\n                      >\n                      <span class=\"spanFakeRadio\"></span>\n                      <span class=\"spanRadioExplanation\">Number</span>\n                    </label>\n                  </div>\n                  <div class=\"divLabelDataTypeSingle\">\n                    <label class=\"labelArgumentsDataTypes\">\n                      <input type=\"radio\"\n                      class=\"inputRadioDataType\"\n                      name=\"inputRadioDataType\"\n                      value=\"object\"\n                      v-model=\"dataType\"\n                      @change=\"processTextAreaValues($event.target.value)\"\n                      >\n                      <span class=\"spanFakeRadio\"></span>\n                      <span class=\"spanRadioExplanation\">Object literal</span>\n                    </label>\n                  </div>\n                  <div class=\"divLabelDataTypeSingle\">\n                    <label class=\"labelArgumentsDataTypes\">\n                      <input type=\"radio\"\n                      class=\"inputRadioDataType\"\n                      name=\"inputRadioDataType\"\n                      value=\"regexp\"\n                      v-model=\"dataType\"\n                      @change=\"processTextAreaValues($event.target.value)\"\n                      >\n                      <span class=\"spanFakeRadio\"></span>\n                      <span class=\"spanRadioExplanation\">RegExp</span>\n                    </label>\n                  </div>\n                  <div class=\"divLabelDataTypeSingle\">\n                    <label class=\"labelArgumentsDataTypes\">\n                      <input type=\"radio\"\n                      class=\"inputRadioDataType\"\n                      name=\"inputRadioDataType\"\n                      value=\"string\"\n                      v-model=\"dataType\"\n                      @change=\"processTextAreaValues($event.target.value)\"\n                      >\n                      <span class=\"spanFakeRadio\"></span>\n                      <span class=\"spanRadioExplanation\">String</span>\n                    </label>\n                  </div>\n                  <div class=\"divLabelDataTypeSingle\">\n                    <label class=\"labelArgumentsDataTypes\">\n                      <input type=\"radio\"\n                      class=\"inputRadioDataType\"\n                      name=\"inputRadioDataType\"\n                      value=\"undefined\" v-model=\"dataType\"\n                      @change=\"processTextAreaValues($event.target.value)\"\n                      >\n                      <span class=\"spanFakeRadio\"></span>\n                      <span class=\"spanRadioExplanation\">Undefined</span>\n                    </label>\n                  </div>\n                  <div class=\"divLabelDataTypeSingle\">\n                    <label class=\"labelArgumentsDataTypes\">\n                      <input type=\"radio\"\n                      class=\"inputRadioDataType\"\n                      name=\"inputRadioDataType\"\n                      value=\"function\"\n                      v-model=\"dataType\"\n                      @change=\"processTextAreaValues($event.target.value)\"\n                      >\n                      <span class=\"spanFakeRadio\"></span>\n                      <span class=\"spanRadioExplanation\">Callback function</span>\n                    </label>\n                  </div>\n                </div>\n              </form>\n\n            </div> <!--End of divLabelDataType-->\n\n            <div class=\"divErrorEntries\">\n              <div class=\"divErrorEntry\" v-show=\"errorEntry === true && dataType === \'array\'\">\n                Incorrect array entry(ies). Make sure you have entered arrays that start and end with\n                square brackets - [].\n                Also make sure that each one of the array elements does not have any errors when entered (example: a mistyped function or a number with incorrect decimals).\n                The values should be separated by a line break and without any extra\n                line breaks at the end of the text.\n              </div>\n              <div class=\"divErrorEntry\" v-show=\"errorEntry === true && dataType === \'boolean\'\">\n                Incorrect boolean entry(ies). Make sure you have entered only boolean values (true, false).\n                The values should be separated by a line break and without any extra\n                line breaks at the end of the text.\n              </div>\n              <div class=\"divErrorEntry\" v-show=\"errorEntry === true && dataType === \'function\'\">\n                Incorrect function entry(ies). Make sure you have entered the function in\n                the correct format, with opening and closing curly braces.\n                The values should be separated by a line break and without any extra\n                line breaks at the end of the text.\n              </div>\n              <div class=\"divErrorEntry\" v-show=\"errorEntry === true && dataType === \'null\'\">\n                Incorrect null entry(ies). Make sure you have entered only null values (null).\n                The values should be separated by a line break and without any extra\n                line breaks at the end of the text.\n              </div>\n              <div class=\"divErrorEntry\" v-show=\"errorEntry === true && dataType === \'number\'\">\n                Incorrect number entry(ies). Make sure you have entered only numeric values (integers or floats).\n                The values should be separated by a line break and without any extra\n                line breaks at the end of the text.\n              </div>\n              <div class=\"divErrorEntry\" v-show=\"errorEntry === true && dataType === \'object\'\">\n                Incorrect object literal entry(ies). Make sure you have entered\n                an object that opens and closes with curly braces - {}.\n                The values should be separated by a line break and without any extra\n                line breaks at the end of the text.\n              </div>\n              <div class=\"divErrorEntry\" v-show=\"errorEntry === true && dataType === \'regexp\'\">\n                Incorrect regex entry(ies). Make sure you have entered a regular\n                expression that  opens and closes with slashes.\n                Make sure that the format of the regex (parenthesis, brackets etc)\n                is correct. Make sure that the flags are correct.\n                The values should be separated by a line break and without any extra\n                line breaks at the end of the text.\n              </div>\n              <div class=\"divErrorEntry\" v-show=\"errorEntry === true && dataType === \'undefined\'\">\n                Incorrect undefined entry(ies). Make sure you have entered only \"undefined\" as a value.\n                The values should be separated by a line break and without any extra\n                line breaks at the end of the text.\n              </div>\n            </div>\n          </div>\n        `\n      }); //End of Vue component\n\n\n\n\n\n\n\n//----MAIN VUE INSTANCE----\n      let app = new Vue({\n        el: \"#main\",\n        data: {\n          expandSectionFunction1: false,\n          shrinkSectionFunction2: false,\n          function1ArrowRotate: false,\n          numOfArgumentsSets: 0, //number of components - number of arguments for functions\n          numOfArgumentsError: false,\n          argumentsArr: [], //The array that has all the initial arguments\n          function1String: \"\",\n          function2String: \"\",\n          function1Result: [],\n          function2Result: [],\n          function1Totalms: 0,\n          function2Totalms: 0,\n          function1Error: false,\n          function2Error: false,\n          function1ErrorMessage: \"\",\n          function2ErrorMessage: \"\",\n          maxElementsNum: 0 //The most number of elements that an argument set has\n        },\n        methods: {\n          // Expands or decreases the width of sectionFunction1\n          adjustFunction1Field(event){\n            console.log(\"before the ternary\", this.expandSectionFunction1);\n            if (this.expandSectionFunction1 === false) {\n              this.expandSectionFunction1 = true;\n              this.shrinkSectionFunction2 = true;\n              this.function1ArrowRotate = true;\n            }\n            else {\n              this.expandSectionFunction1 = false;\n              this.shrinkSectionFunction2 = false;\n              this.function1ArrowRotate = false;\n            }\n            console.log(\"after the ternary\", this.expandSectionFunction1);\n          },\n\n\n          //updates the length of the argumentsArr based on the addition or subtraction\n          //of new components\n          changeArgumentsArrLength(event){\n            if (event.target.value > 10) event.target.value = 10;\n            /*\n            I need to decide if I want to keep this if statement or if an argument\n            with an empty string should be placed every time I add a new textArea.\n            The ternary operator that is commented out does that.\n            This if statement just pops off an element every time I substract a text\n            area.\n            */\n            while (Number(this.numOfArgumentsSets) < this.argumentsArr.length) {\n              this.argumentsArr.pop();\n            }\n            // Number(this.numOfArgumentsSets) > this.argumentsArr.length ?\n            // this.argumentsArr.push(\"\") :\n            // this.argumentsArr.pop();\n          },\n\n\n          //Evaluate the strings that are pasted in the function textAreas and confirm they\n          //are valid functions\n          evalMainFunctions(el){\n            el = el.trim();\n            if (el === this.function1String.trim()) {\n              console.log(\"Entering the if statement for function1\");\n              this.function1Error = false;\n              if (this.evalFunctionStartEnd(el)) {\n                console.log(\"deeper for 1\");\n                this.function1Error = true;\n                this.function1ErrorMessage = \"There is a syntax error at the beginning or the end of your function. Please fix the syntax error and submit again.\";\n                return \"error\";\n              }\n            }\n            else if(el === this.function2String.trim()){\n              console.log(\"entering the if statement for function2\");\n              this.function2Error = false;\n              if (this.evalFunctionStartEnd(el)) {\n                console.log(\"deeper for 2\");\n                this.function2Error = true;\n                this.function2ErrorMessage = \"There is a syntax error at the beginning or the end of your function. Please fix the syntax error and submit again.\";\n                return \"error\";\n              }\n            }\n\n\n            let params = el.slice(el.indexOf(\"(\") + 1, el.indexOf(\")\")).split(/,\s*/);\n            params.push(el.slice(el.indexOf(\"{\") + 1, el.lastIndexOf(\"}\")));\n            console.log(\"The function parameters are:\", params);\n            console.log(\"about to return the new function\");\n\n\n            try {\n              new Function(...params)\n            }\n            catch (error) {\n              console.log(\"caught\");\n              if (el === this.function1String.trim()) {\n                this.function1Error = true;\n                this.function1ErrorMessage = error.toString();\n              }\n              if (el === this.function2String.trim())\n              {\n                this.function2Error = true;\n                this.function2ErrorMessage = error.toString();\n              }\n            }\n\n            return new Function(...params);\n          },\n\n\n\n          //\n          evalFunctionStartEnd(e){\n            if (!e.startsWith(\"function\") ||\n            !e.search(/(var|let|const)\s[A-z_\$]\w*\s*=\s*\(([A-z_\$]\w*,?\s*)*\)\s*=>/ !== 0) ||\n            !e.endsWith(\"}\")) return true;\n\n            return false;\n          },\n\n\n\n          testFunctionPerformance(){\n            console.log(\"starting function testFunctionPerformance\");\n            // if both function strings are empty, return without running function\n            if (this.function1String === \"\" && this.function2String === \"\") return;\n\n            //Create function. Evaluate if it is a valid function\n            let function1, function2;\n\n            if (this.function1String !== \"\") function1 = this.evalMainFunctions(this.function1String);\n            if (this.function2String !== \"\") function2 = this.evalMainFunctions(this.function2String);\n\n\n            // If one of the two functions has an error, return without running function\n            //PERHAPS I NEED TO EXPAND THIS WITH AN ERROR ALERT\n            console.log(\"function1: \", function1, \"function2: \", function2);\n            if (function1 === \"error\" || function2 === \"error\") return;\n\n            //return the argumentsArr in its initial status\n            this.refreshArgumentsArr();\n            //return function1Result and function2Result in its initial status\n            this.refreshFunctionResults();\n            this.function1Totalms = 0;\n            this.function2Totalms = 0;\n            this.function1Result = [];\n            this.function2Result = [];\n\n            //How can I make sure that if any elements are removed from the argument slots, this recalculates\n            let leveledArguments = this.levelArguments();\n            console.log(this.levelArguments());\n            console.log(\"leveledArguments is \", leveledArguments);\n            //To be pushed in function1Result or function2Result\n\n            if (function1){\n              this.function1Result = this.functionExtraction(function1, leveledArguments, 1);\n              for (let i = 0; i < this.function1Result.length; i++) {\n                this.function1Totalms += this.function1Result[i].ms\n              }\n            }\n            if (function2){\n              this.function2Result = this.functionExtraction(function2, leveledArguments, 2);\n              for (let i = 0; i < this.function2Result.length; i++) {\n                this.function2Totalms += this.function2Result[i].ms\n              }\n            }\n          },\n\n\n          //calculates performance and returns function\'s product and ms.\n          //What is returned is an array with objects with properties that have keys\n          //\"ms\" and \"output\"\n          functionExtraction(func, funcArguments, num){\n            let finalOutput = [];\n            console.log(\"about to start functionExtraction\");\n            console.log(`the data used are:\n              func: ${func}\n              funcArguments: ${funcArguments}`);\n\n              //Test if the function has any errors\n              this.catchErrors(func, funcArguments, num);\n\n            // If there are no arguments used in the function, then return the function\'s\n            // product without any parameters\n            if (!funcArguments) {\n              let functionResult = {};\n              let timeStart = performance.now();\n              func();\n              let timeEnd = performance.now();\n\n              functionResult.ms = timeEnd - timeStart; //Adding ms of function in object\n              functionResult.output = func();\n              finalOutput.push(functionResult);\n\n              console.log(\"Invoking func()\", func());\n              console.log(`The time it took to invoke was, ${timeEnd - timeStart}, milliseconds`);\n            }\n            else {\n              for (let i = 0; i < funcArguments.length; i++) {\n                let functionResult = {};\n                let timeStart = performance.now();\n                func(...funcArguments[i]);\n                let timeEnd = performance.now();\n\n                functionResult.ms = timeEnd - timeStart;\n                functionResult.output = func(...funcArguments[i]);\n                finalOutput.push(functionResult);\n                console.log(\"Invoking func(...params)\", func(...funcArguments[i]));\n                console.log(`The time it took to invoke was, ${timeEnd - timeStart}, milliseconds`);\n              } //End of for loop\n\n            } //end of else statement\n\n            return finalOutput;\n          },\n\n\n          /*Take all the array elements from this.argumensArr and convert them in\n          array elements of the same length.*/\n          levelArguments(){\n            console.log(\"invoking levelArguments()\");\n\n            //Zero the this.maxElementsNum first\n            this.maxElementsNum = 0;\n            let args = this.argumentsArr.slice();\n            console.log(\"this.argumentsArr is\", this.argumentsArr);\n            if (this.argumentsArr.length === 0) return;\n\n\n            // Iterate through all the elements of this.argumentsArr.\n            // If the length of the element is larger than the this.maxElementsNum\n            // then the this.maxElementsNum has to become equal to the element\'s length.\n            for (let i = 0; i < this.argumentsArr.length; i++) {\n              if (args[i].length > this.maxElementsNum) this.maxElementsNum = args[i].length;\n            }\n\n\n            // Iterate through all the elements of this.argumentsArr one more time\n            // If the element\'s length is less than the this.maxElementsNum\n            // Create a nested loop with i < element\'s length\n            // push elements from the beginning of the element\n            // every time after you push, check if the element\'s length is equal\n            // to the this.maxElementsNum. If so, then break\n            for (let j = 0; j < args.length; j++) {\n              let element = args[j];\n              console.log(\"Looping through j for loop. element is\", element);\n              if (element.length < this.maxElementsNum) {\n                for (let k = 0; k < this.maxElementsNum; k++) {\n                  args[j].push(element[k]);\n                  if(args[j].length === this.maxElementsNum) break;\n                }\n              }\n            }\n\n            // this.refreshArgumentsArr();\n            console.log(\"In the end of this.levelArguments(), the argumentsArr is \", args, \"About to start the arrayFlip()\");\n            return this.arrayFlip(args);\n          }, //End of levelArguments()\n\n\n          //used to return the array to its initial status\n          refreshArgumentsArr(){\n            console.log(\"In function refreshArgumentsArr. Will run processTextAreaValues through this\");\n            this.argumentsArr = [];\n            console.log(\"this.numOfArgumentsSets is\", this.numOfArgumentsSets);\n            for (var i = 0; i < Number(this.numOfArgumentsSets); i++) {\n              this.argumentsArr.push(app.$children[i].processTextAreaValues());\n            }\n\n            console.log(\"after the iteration in refreshArgumentsArr, the argumentsArr is\", this.argumentsArr);\n\n            //need to iterate through the children of the component\n            //If the elements of the children are less or more than the elements\n            //of each respective argument in the this.argumentsArr, then update\n            //Should I create a separate property in the instance that updates from\n            //The argumentsArr through the levelArguments?\n          },\n\n\n          //used to zero out function1Result and function2Result\n          refreshFunctionResults(){\n            this.function1Result = [];\n            this.function2Result = [];\n          },\n\n\n          //used to flip the array\'s elements from rows to columns so that every element\n          //of the array is a set of different arguments.\n          arrayFlip(arr) {\n            console.log(\"In the arrayFlip with arr =\", arr);\n            let endArr = [];\n\n            for (let i = 0; i < arr[0].length; i++) {\n              endArr.push([]);\n            }\n\n            for (let j = 0; j < arr.length; j++) {\n              for (let k = 0; k < arr[j].length; k++) {\n                endArr[k].push(arr[j][k]);\n              }\n            }\n            console.log(\"Endarr is \", endArr);\n            return endArr;\n          },\n\n\n\n          catchErrors(fnctn, args, num){\n            try {\n              /*If arguments exist, they are in an array. Therefore I use a for\n              loop to go over them and confirm that all are working. Otherwise, \n              throw an error*/\n              if (!args) fnctn();\n              else{\n                for (var i = 0; i < args.length; i++) {\n                  fnctn(...args[i]);\n                }\n              }\n            }\n            catch(error) {\n              console.error(error);\n              if (num === 1) {\n                this.function1Error = true;\n                this.function1ErrorMessage = error.toString();\n              }\n              else if (num === 2) {\n                this.function2Error = true;\n                this.function2ErrorMessage = error.toString();\n              }\n\n            }\n          },\n\n\n        }, //End of methods\n        computed: {\n        } //End of computed\n      });\n\n    </script>\n\n  </body>\n</html>"}
