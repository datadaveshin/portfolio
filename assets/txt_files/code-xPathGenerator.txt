<!DOCTYPE html>\n<html lang=\'en\' dir=\'ltr\'>\n  <head>\n    <meta charset=\'utf-8\'>\n    <link rel=\'stylesheet\' href=\'https://stackpath.bootstrapcdn.com/bootstrap/4.1.1/css/bootstrap.min.css\' integrity=\'sha384-WskhaSGFgHYWDcbwN70/dfYBj47jz9qbsMId/iRN3ewGhXQFZCSftd1LZCfmhktB\' crossorigin=\'anonymous\'>\n    <script src=\'https://cdn.jsdelivr.net/npm/vue/dist/vue.js\'></script>\n    <title>xPath Generator</title>\n\n\n    <style media=\'screen\'>\n\n      *{\n        box-sizing: border-box;\n      }\n\n      .divContainer{\n        display: grid;\n        grid-template-rows: 85vh 15vh;\n        grid-template-columns: 60vw 40vw;\n        grid-template-areas:\n\n        \'sectionOptions sectionElements\'\n        \'sectionResult sectionResult\';\n      }\n\n      .sectionOptions{\n        grid-area: sectionOptions;\n        display: grid;\n        grid-template-columns: 45% 55%;\n        grid-template-rows: 60% 3% 17% 20%;\n        grid-template-areas:\n        \'branches functions\'\n        \'brackets functions\'\n        \'brackets operators\'\n        \'attributes parameters\';\n        font-size: 0.85em;\n      }\n\n      .branches, .functions, .brackets, .operators, .attributes, .parameters{\n        padding: 10px;\n      }\n\n      .branches{\n        grid-area: branches;\n        border-right: 2px solid rgb(0,0,128);\n        border-top: 2px solid rgb(0,0,128);\n      }\n\n      .branches:hover{\n        background: rgba(0,0,128,.1);\n      }\n\n      .branches h3{\n        color: rgb(0,0,128);\n      }\n\n      .branches hr{\n        margin: 3%;\n      }\n\n      .divBranchesAbsoluteRelative{\n        display: flex;\n        justify-content: space-around;\n      }\n\n      .divBranchesInputs{\n        display: flex;\n        flex-flow: column wrap;\n        height: 80%;\n        align-content: space-around;\n      }\n\n      .divBranchesInputs input:focus + span{\n        color: rgb(0,0,128);\n      }\n\n      .brackets{\n        grid-area: brackets;\n        border-right: 2px solid rgb(0,100,0);\n        border-top: 2px solid rgb(0,100,0);\n      }\n\n      .brackets:hover{\n        background-color: rgba(0,100,0,.1);\n      }\n\n      .brackets h3{\n        color: rgb(0,100,0); /*Dark green*/\n      }\n\n      .divBracketsInputs{\n        height: 80%;\n        display: flex;\n        justify-content: center;\n        align-content: center;\n      }\n\n      .divBracketsInputs label{\n        margin: 0;\n      }\n\n      .divBracketsInputs input:focus + span{\n        color: rgb(0,100,0);\n      }\n\n      .divBracketsInputs table{\n        width: 100%;\n      }\n\n      .divBracketsInputs table td{\n        text-align: center;\n        vertical-align: middle;\n        padding: 0;\n      }\n\n      .operators{\n        grid-area: operators;\n        border-top: 2px solid rgb(255,140,0);\n        border-right: 2px solid rgb(255,140,0);\n      }\n\n      .operators:hover{\n        background-color: rgba(255,140,0,.1);\n      }\n\n      .operators h3{\n        color: rgb(255,140,0);\n      }\n\n      .divOperatorsInputs{\n        display: flex;\n        flex-flow: column wrap;\n        height: 80%;\n        align-content: space-around;\n      }\n\n      .divOperatorsInputs input:focus + span{\n        color: rgb(255,140,0);\n      }\n\n      .functions{\n        grid-area: functions;\n        border-right: 2px solid rgb(128,0,32);\n        border-top: 2px solid rgb(128,0,32);\n      }\n\n      .functions:hover{\n        background-color: rgba(128,0,32,.1);\n      }\n\n      .functions h3{\n        color: rgb(128,0,32);\n      }\n\n      .divFunctionsInputs{\n        display: flex;\n        flex-flow: column wrap;\n        height: 90%;\n        align-content: space-around;\n        font-size: .79rem;\n        padding: 1px;\n      }\n\n      .divFunctionsInputs input:focus + span{\n        color: rgb(128,0,32);\n      }\n\n      .functionSpansFontSize{\n        color: red;\n      }\n\n      .attributes{\n        grid-area: attributes;\n        border-top: 2px solid rgb(184,134,11);\n        border-right: 2px solid rgb(184,134,11);\n      }\n\n      .attributes:hover{\n        background-color: rgba(184,134,11, .1);\n      }\n\n      .attributes h3{\n        color: rgb(184,134,11);\n      }\n\n      .divAttributesInputs{\n        display: flex;\n        align-content: space-around;\n        justify-content: space-between;\n        flex-wrap: wrap;\n      }\n\n      .divAttributesInputs label{\n        margin-right: 2px;\n      }\n\n      .divAttributesInputs input:focus + span{\n        color: rgb(184,134,11);\n      }\n\n      .parameters{\n        grid-area: parameters;\n        display: grid;\n        grid-template-columns: 100%;\n        grid-template-rows: 30% 30% 40%;\n        grid-template-areas:\n        \'gridParamsHeading\'\n        \'gridParamsLevel1\'\n        \'gridParamsLevel2\';\n        border-top: 2px solid rgb(128,0,128); /*purple*/\n        border-right: 2px solid rgb(128,0,128);\n      }\n\n      .parameters:hover{\n        background-color: rgba(128,0,128, .1);\n      }\n\n      .parameters h3{\n        color: rgb(128,0,128);\n      }\n\n      .gridParamsHeading{\n        grid-area: gridParamsHeading\n      }\n\n      .gridParamsLevel1{\n        grid-area: gridParamsLevel1;\n        display: flex;\n        justify-content: center;\n      }\n\n      .gridParamsLevel1 label{\n        margin-right: 10px;\n      }\n\n      .gridParamsLevel1 input:focus + span{\n        color: rgb(128,0,128);\n      }\n\n      .gridParamsLevel2{\n        grid-area: gridParamsLevel2;\n        display: flex;\n        justify-content: center;\n      }\n\n      h3, h4{\n        text-align: center;\n      }\n\n      label:hover{\n        font-weight: bold;\n        cursor: pointer;\n      }\n\n      input:focus + span{\n        font-weight: bold;\n      }\n\n      .sectionOptions span::after {\n        display: block;\n        content: attr(data-bold);\n        font-weight: bold;\n        height: 0;\n        overflow: hidden;\n        visibility: hidden;\n      }\n\n      .sectionElements{\n        grid-area: sectionElements;\n        display: grid;\n        grid-template-columns: 100%;\n        grid-template-rows: 40% 15% 45%;\n        grid-template-areas:\n        \'divFunctionsSequenceArrElements\'\n        \'divFunctionConcatenation\'\n        \'divPathArrayElements\';\n        background-color: rgb(245,245,245);\n      }\n\n      .sectionElements input{\n        margin: 5px;\n        padding: 5px 0 5px 5px;\n      }\n\n      .divFunctionsSequenceArrElements,\n      .divFunctionConcatenation,\n      .divPathArrayElements{\n        padding: 10px;\n      }\n\n      .divFunctionsSequenceArrElements{\n        grid-area: divFunctionsSequenceArrElements;\n        display: grid;\n        grid-template-columns: 100%;\n        grid-template-rows: 10% 75% 15%;\n        grid-template-areas:\n        \'divFunctionsSequenceArrHeader\'\n        \'divFunctionsSequenceArrInputs\'\n        \'divFunctionsConcatButton\';\n        line-height: 1;\n        border-top: 2px solid rgb(128,0,32);\n        border-right: 2px solid rgb(128,0,32);\n      }\n\n      .divFunctionsSequenceArrElements h3{\n        color: rgb(128,0,32);\n      }\n\n      .spanActiveFunctionTitle{\n        font-weight: bold;\n        font-size: 1.3rem;\n        min-width: 450px;\n        width: 450px;\n        color: rgb(128,0,32);\n      }\n\n      .divFunctionsSequenceArrInputs{\n        grid-area: divFunctionsSequenceArrInputs;\n        overflow: auto;\n        position: relative;\n      }\n\n      .divFunctionsSequenceArrInputs label input{\n        border: 2px solid rgb(128,0,32); /*Burgundy*/\n        border-radius: 5%;\n        margin: 2px;\n      }\n\n      .divFunctionsSequenceArrInputs label input:hover{\n        background-color: rgba(255,0,255, .2); /*Magenda*/\n      }\n\n      .divFunctionsSequenceArrInputs label input:focus{\n        background-color: rgba(255, 0, 255, .4);\n        color: rgb(128,0,32);\n        outline: none;\n      }\n\n      .divFunctionsConcatButton{\n        display: flex;\n        justify-content: flex-end;\n        align-content: flex-end;\n      }\n\n      #buttonConcatAxes{\n        padding: 3px;\n        font-weight: bold;\n        color: rgb(128,0,32);\n        border: 2px solid rgb(128,0,32);\n        margin: 0;\n      }\n\n      #buttonConcatAxes:hover{\n        cursor: pointer;\n        background-color: rgba(128,0,32, .2);\n      }\n\n      #buttonConcatAxes:active{\n        background-color: rgb(128,0,32);\n        color: white;\n      }\n\n      #buttonConcatAxes:focus{\n        outline: none;\n      }\n\n      .divFunctionConcatenation{\n        grid-area: divFunctionConcatenation;\n        word-wrap: break-word;\n        overflow: auto;\n        border-top: 2px solid rgb(47,79,79); /*dark slate gray*/\n        border-right: 2px solid rgb(47,79,79);\n      }\n\n      .divFunctionConcatenation h3{\n        color: rgb(47,79,79);\n      }\n\n      .divPathArrayElements{\n        grid-area: divPathArrayElements;\n        overflow: auto;\n        border-top: 2px solid rgb(0,0,128); /*Navy blue*/\n        border-right: 2px solid rgb(0,0,128); /*Navy blue*/\n      }\n\n      .divPathArrayElements h3{\n        color: rgb(0,0,128);\n      }\n\n      .divPathArrayElements label input{\n        border: 2px solid rgb(0,0,128); /*Navy blue*/\n        border-radius: 5%\n      }\n\n      .divPathArrayElements label input:hover{\n        background-color: rgba(0,255,255, .2); /*aqua*/\n      }\n\n      .divPathArrayElements label input:focus{\n        background-color: rgba(0,255,255, .4);\n        color: rgb(0,0,128);\n        outline: none;\n      }\n\n      .sectionResult{\n        grid-area: sectionResult;\n        display: grid;\n        grid-template-columns: 18vw 82vw;\n        grid-template-rows: 100%;\n        grid-template-areas:\n        \'divFooter divResult\'\n      }\n\n      .divFooter{\n        background-color: black;\n        color: white;\n        text-align: center;\n        display: flex;\n        justify-content: center;\n        flex-flow: column wrap;\n      }\n\n      .divFooter a{\n        color: white;\n      }\n\n      .divResult{\n        border: 2px solid black;\n        display: grid;\n        grid-template-columns: 100%;\n        grid-template-rows: 20% 80%;\n        grid-template-areas:\n        \'divResultHeader\'\n        \'divResultTextArea\';\n        background-color: rgb(220, 220, 220);\n      }\n\n      #textAreaFullPath{\n        width: 100%;\n        height: 100%;\n        padding: 5px;\n      }\n\n      .divResultTextArea{\n        padding: 10px;\n        position: relative;\n      }\n\n      #buttonCopyxPath{\n        position: absolute;\n        right: 10px;\n        bottom: 10px;\n        border: 2px solid black;\n        font-weight: bold;\n      }\n\n      #buttonCopyxPath:hover{\n        pointer: cursor;\n        background-color: rgba(0,0,0, .4);\n      }\n\n      #buttonCopyxPath:active{\n        background-color: black;\n        color: white;\n      }\n\n      #buttonCopyxPath:focus{\n        outline: none;\n      }\n\n      .divBranchesInputs label{\n        position: relative;\n      }\n\n      .spanBubble{\n        position: absolute;\n        width: 150px;\n        font-size: .8em;\n        font-weight: bold;\n        padding: 5px;\n        color: white;\n        border-radius: 7%;\n        font-family: arial;\n        /* margin-top: 10px;\n        margin-left: -5px; */\n        z-index: 0;\n        opacity: 0;\n        visibility: 0;\n        transition: opacity 0.3s;\n      }\n\n      .branches .spanBubble{\n        background-color: rgba(0,0,128, .8);\n      }\n\n      .functions .spanBubble{\n        background-color: rgba(128,0,32, .8);\n      }\n\n      .brackets .spanBubble{\n        background-color: rgba(0,100,0, .8);\n      }\n\n      .operators .spanBubble{\n        background-color: rgba(255,140,0, .8);\n      }\n\n      .attributes .spanBubble{\n        background-color: rgba(184,134,11, .8);\n      }\n\n      .parameters .spanBubble{\n        background-color: rgba(128,0,128, .8);\n      }\n\n      .divLabelContainer{\n        position: relative;\n      }\n\n      .divLabelContainer label{\n        display: inline-block;\n      }\n\n      .divFooter .spanBubble{\n        position: absolute;\n        bottom: 30%;\n        left: 30%;\n        border: 2px solid black;\n        width: auto;\n        border-radius: 0;\n        background-color: white;\n        z-index: -1;\n      }\n\n      .spanBubble code{\n        color: yellow;\n        font-size: 1em;\n      }\n\n      label:hover + .spanBubble, h3:hover + .spanBubble{\n        visibility: visible;\n        opacity: 1;\n        z-index: 1;\n      }\n\n    </style>\n\n  </head>\n\n\n\n\n\n\n\n  <body>\n    <main id=\'mainSlot\'>\n      <div class=\'divContainer\'>\n\n        <section class=\'sectionOptions\'>\n          <div class=\'branches\'>\n            <h3>Axes / Node</h3>\n\n\n            <div class=\'divBranchesAbsoluteRelative\'>\n              <div class=\'divLabelContainer\'>\n                <label>\n                  <input type=\'radio\' name=\'absoluteRelativeAxis\' v-model=\'absoluteRelativeAxis\' value=\'absolute\'>\n                  <span data-bold=\'---Absolute path\'>Absolute path</span>\n                </label>\n                <span class=\'spanBubble\'>Path starts from the root element (<code>/</code> at the front)</span>\n              </div>\n              <div class=\'divLabelContainer\'>\n                <label>\n                  <input type=\'radio\' name=\'absoluteRelativeAxis\' v-model=\'absoluteRelativeAxis\' value=\'relative\'>\n                  <span data-bold=\'---Relative path\'>Relative path</span>\n                </label>\n                <span class=\'spanBubble\'>Path starts from position relative to the current node (.)</span>\n              </div>\n            </div>\n            <hr>\n            <div class=\'divBranchesInputs\'>\n              <div class=\'divLabelContainer\'>\n                <label>\n                  <input type=\'radio\' value=\'\' name=\'axisOption\' v-model=\'axis\'>\n                  <span data-bold=\'---None\'>None</span>\n                </label>\n                <span class=\'spanBubble\'>No path expression selected</span>\n              </div>\n              <div class=\'divLabelContainer\'>\n                <label>\n                  <input type=\'radio\' value=\'/self::\' name=\'axisOption\' v-model=\'axis\' @click=\'node = \'node()\'\'>\n                  <span data-bold=\'---. (/self::node())\'>. (/self::node())</span>\n                </label>\n                <span class=\'spanBubble\'>Use <code>.</code> if you want to shortcut your xPath</span>\n              </div>\n              <div class=\'divLabelContainer\'>\n                <label>\n                  <input type=\'radio\' value=\'/parent::\' name=\'axisOption\' v-model=\'axis\' @click=\'node = \'node()\'\'>\n                  <span data-bold=\'---.. (/parent::node())\'>.. (/parent::node())</span>\n                </label>\n                <span class=\'spanBubble\'>Select parent node. Use <code>..</code> if you want to shortcut your xPath</span>\n              </div>\n              <div class=\'divLabelContainer\'>\n                <label>\n                  <input type=\'radio\' value=\'//\' name=\'axisOption\' v-model=\'axis\'>\n                  <span data-bold=\'---// (descendant-or-self::)\'>// (descendant-or-self::)</span>\n                </label>\n                <span class=\'spanBubble\'>Select descendants or existing node. Use <code>//</code> if you want to shortcut your xPath</span>\n              </div>\n              <div class=\'divLabelContainer\'>\n                <label>\n                  <input type=\'radio\' value=\'/ancestor::\' name=\'axisOption\' v-model=\'axis\'>\n                  <span data-bold=\'---/ancestor::\'>/ancestor::</span>\n                </label>\n                <span class=\'spanBubble\'>Select the ancestors of the current node (parents, grandparents etc)</span>\n              </div>\n              <div class=\'divLabelContainer\'>\n                <label>\n                  <input type=\'radio\' value=\'/ancestor-or-self::\' name=\'axisOption\' v-model=\'axis\'>\n                  <span data-bold=\'---/ancestor-or-self::\'>/ancestor-or-self::</span>\n                </label>\n                <span class=\'spanBubble\'>Select the ancestors of the current node (parents, grandparents etc) or the node itself</span>\n              </div>\n              <div class=\'divLabelContainer\'>\n                <label>\n                  <input type=\'radio\' value=\'/attribute::\' name=\'axisOption\' v-model=\'axis\'>\n                  <span data-bold=\'/attribute:: (@)\'>/attribute:: (@)</span>\n                </label>\n                <span class=\'spanBubble\'>\n                  Select an attribute of the existing node. Use <code>@</code> to\n                  shortcut your xpath. Use the Attributes section.\n                </span>\n              </div>\n              <div class=\'divLabelContainer\'>\n                <label>\n                  <input type=\'radio\' value=\'/child::\' name=\'axisOption\' v-model=\'axis\'>\n                  <span data-bold=\'---/child::\'>/child::</span>\n                </label>\n                <span class=\'spanBubble\'>Select any of the immediate children of the current node</span>\n              </div>\n              <div class=\'divLabelContainer\'>\n                <label>\n                  <input type=\'radio\' value=\'/descendant::\' name=\'axisOption\' v-model=\'axis\'>\n                  <span data-bold=\'---/descendant::\'>/descendant::</span>\n                </label>\n                <span class=\'spanBubble\'>Select the descendants of the current node (children, grandchildren etc)</span>\n              </div>\n              <div class=\'divLabelContainer\'>\n                <label>\n                  <input type=\'radio\' value=\'/descendant-or-self::\' name=\'axisOption\' v-model=\'axis\'>\n                  <span data-bold=\'---/descendant-or-self::\'>/descendant-or-self::</span>\n                </label>\n                <span class=\'spanBubble\'>Select the descendants of the current node (children, grandchildren etc) or the node itself</span>\n              </div>\n              <div class=\'divLabelContainer\'>\n                <label>\n                  <input type=\'radio\' value=\'/following::\' name=\'axisOption\' v-model=\'axis\'>\n                  <span data-bold=\'---/following::\'>/following::</span>\n                </label>\n                <span class=\'spanBubble\'>Select the nodes that are following the current node (siblings or other branches in the document)</span>\n              </div>\n              <div class=\'divLabelContainer\'>\n                <label>\n                  <input type=\'radio\' value=\'/following-sibling::\' name=\'axisOption\' v-model=\'axis\'>\n                  <span data-bold=\'---/following-sibling::\'>/following-sibling::</span>\n                </label>\n                <span class=\'spanBubble\'>Select the immediate siblings that follow the current node</span>\n              </div>\n              <div class=\'divLabelContainer\'>\n                <label>\n                  <input type=\'radio\' value=\'/namespace::\' name=\'axisOption\' v-model=\'axis\'>\n                  <span data-bold=\'---/namespace::\'>/namespace::</span>\n                </label>\n                <span class=\'spanBubble\'>Select the namespace nodes of the current node</span>\n              </div>\n              <div class=\'divLabelContainer\'>\n                <label>\n                  <input type=\'radio\' value=\'/parent::\' name=\'axisOption\' v-model=\'axis\'>\n                  <span data-bold=\'---/parent::\'>/parent::</span>\n                </label>\n                <span class=\'spanBubble\'>Select the parent of the current node</span>\n              </div>\n              <div class=\'divLabelContainer\'>\n                <label>\n                  <input type=\'radio\' value=\'/preceding::\' name=\'axisOption\' v-model=\'axis\'>\n                  <span data-bold=\'---/preceding::\'>/preceding::</span>\n                </label>\n                <span class=\'spanBubble\'>Select all preceding nodes of the current node (parent, grandparents etc)</span>\n              </div>\n              <div class=\'divLabelContainer\'>\n                <label>\n                  <input type=\'radio\' value=\'/preceding-sibling::\' name=\'axisOption\' v-model=\'axis\'>\n                  <span data-bold=\'---/preceding-sibling::\'>/preceding-sibling::</span>\n                </label>\n                <span class=\'spanBubble\'>Select the preceding siblings of the current node</span>\n              </div>\n              <div class=\'divLabelContainer\'>\n                <label>\n                  <input type=\'radio\' value=\'/self::\' name=\'axisOption\' v-model=\'axis\'>\n                  <span data-bold=\'---/self::\'>/self::</span>\n                </label>\n                <span class=\'spanBubble\'>Select the current node itself</span>\n              </div>\n              <div class=\'divLabelContainer\'>\n                <label>\n                  <input type=\'text\' name=\'addNode\' v-model=\'node\' @keyup.enter=\'addBranch($event)\' size=\'12\'>\n                  <span data-bold=\'---Node\'>Node</span>\n                </label>\n                <span class=\'spanBubble\'>\n                  Enter the node\'s name. Press \'enter\' when done. <br>\n                   - If you want, you can use this input field to enter other xPath elements.\n                </span>\n              </div>\n            </div>\n          </div>\n\n\n\n\n          <div class=\'brackets\'>\n            <h3>Predicates / Parenthesis</h3>\n            <div class=\'divBracketsInputs\'>\n              <table>\n                <tr>\n                  <td>&nbsp;</td>\n                  <td>Open</td>\n                  <td>Close</td>\n                  <td>None</td>\n                </tr>\n                <tr>\n                  <td>Brackets</td>\n                  <td>\n                    <div class=\'divLabelContainer\'>\n                      <label>\n                        <input type=\'radio\' name=\'brackets\' value=\'[\' v-model=\'brackets\' @click=\'addBrackets($event)\'>\n                        <span data-bold=\'---[\'>[</span>\n                      </label>\n                      <span class=\'spanBubble\'>Open square bracket <code>[</code></span>\n                    </div>\n                  </td>\n                  <td>\n                    <div class=\'divLabelContainer\'>\n                      <label>\n                        <input type=\'radio\' name=\'brackets\' value=\']\' v-model=\'brackets\' @click=\'addBrackets($event)\'>\n                        <span data-bold=\'---]\'>]</span>\n                      </label>\n                      <span class=\'spanBubble\'>Close square bracket <code>]</code></span>\n                    </div>\n                  </td>\n                  <td rowspan=\'2\'>\n                    <div class=\'divLabelContainer\'>\n                      <label>\n                        <input type=\'radio\' name=\'brackets\' value=\'\' v-model=\'brackets\'>\n                      </label>\n                      <span class=\'spanBubble\'>No option selected</span>\n                    </div>\n                  </td>\n                </tr>\n                <tr>\n                  <td>Parenthesis</td>\n                  <td>\n                    <div class=\'divLabelContainer\'>\n                      <label>\n                        <input type=\'radio\' name=\'brackets\' value=\'(\' v-model=\'brackets\' @click=\'addBrackets($event)\'>\n                        <span data-bold=\'---(\'>(</span>\n                      </label>\n                      <span class=\'spanBubble\'>Open parenthesis <code>(</code></span>\n                    </div>\n                  </td>\n                  <td>\n                    <div class=\'divLabelContainer\'>\n                      <label>\n                        <input type=\'radio\' name=\'brackets\' value=\')\' v-model=\'brackets\' @click=\'addBrackets($event)\'>\n                        <span data-bold=\'---)\'>)</span>\n                      </label>\n                      <span class=\'spanBubble\'>Close parenthesis <code>)</code></span>\n                    </div>\n                  </td>\n                </tr>\n              </table>\n            </div>\n          </div>\n\n\n\n\n          <div class=\'functions\'>\n            <h3>Functions</h3>\n            <div class=\'divFunctionsInputs\'>\n              <div class=\'divLabelContainer\'>\n                <label>\n                  <input type=\'radio\' name=\'activeFunction\' value=\'\' v-model=\'activeFunction\' disabled>\n                  <span data-bold=\'---None\'>None</span>\n                </label>\n                <span class=\'spanBubble\'>No function selected</span>\n              </div>\n              <div class=\'divLabelContainer\'>\n                <label>\n                  <input type=\'radio\' name=\'activeFunction\' value=\'boolean\' v-model=\'activeFunction\' @click=\'addFunction($event)\'>\n                  <span data-bold=\'---boolean()\'>boolean()</span>\n                </label>\n                <span class=\'spanBubble\'>\n                  The boolean function evaluates an expression and returns true or false. | <code>boolean(expression)</code>\n                </span>\n              </div>\n              <div class=\'divLabelContainer\'>\n                <label>\n                  <input type=\'radio\' name=\'activeFunction\' value=\'ceiling\' v-model=\'activeFunction\' @click=\'addFunction($event)\'>\n                  <span data-bold=\'---ceiling()\'>ceiling()</span>\n                </label>\n                <span class=\'spanBubble\'>\n                  The ceiling function evaluates a decimal number and returns the\n                  smallest integer greater than or equal to the decimal number.\n                  | <code>ceiling(number)</code>\n                </span>\n              </div>\n              <div class=\'divLabelContainer\'>\n                <label>\n                  <input type=\'radio\' name=\'activeFunction\' value=\'choose\' v-model=\'activeFunction\' @click=\'addFunction($event)\'>\n                  <span data-bold=\'---choose()\'>choose()</span>\n                </label>\n                <span class=\'spanBubble\'>\n                  The choose function returns one of the specified objects based\n                  on a boolean parameter. | <code>choose(boolean , object1, object2)</code>\n                </span>\n              </div>\n              <div class=\'divLabelContainer\'>\n                <label>\n                  <input type=\'radio\' name=\'activeFunction\' value=\'concat\' v-model=\'activeFunction\' @click=\'addFunction($event)\'>\n                  <span data-bold=\'---concat()\'>concat()</span>\n                </label>\n                <span class=\'spanBubble\'>\n                  The concat function concatenates two or more strings and returns\n                  the resulting string. | <code>concat(string1 ,string2 [,stringn]*)</code>\n                </span>\n              </div>\n              <div class=\'divLabelContainer\'>\n                <label>\n                  <input type=\'radio\' name=\'activeFunction\' value=\'contains\' v-model=\'activeFunction\' @click=\'addFunction($event)\'>\n                  <span data-bold=\'---contains()\'>contains()</span>\n                </label>\n                <span class=\'spanBubble\'>The contains function determines whether\n                  the first argument string contains the second argument string\n                  and returns boolean true or false. | <code>contains(haystack, needle)</code>\n                </span>\n              </div>\n              <div class=\'divLabelContainer\'>\n                <label>\n                  <input type=\'radio\' name=\'activeFunction\' value=\'count\' v-model=\'activeFunction\' @click=\'addFunction($event)\'>\n                  <span data-bold=\'---count()\'>count()</span>\n                </label>\n                <span class=\'spanBubble\'>\n                  The count function counts the number of nodes in a node-set and\n                  returns an integer. | <code>count(node-set)</code>\n                </span>\n              </div>\n              <div class=\'divLabelContainer\'>\n                <label>\n                  <input type=\'radio\' name=\'activeFunction\' value=\'current\' v-model=\'activeFunction\' @click=\'addFunction($event)\'>\n                  <span data-bold=\'---current()\'>current()</span>\n                </label>\n                <span class=\'spanBubble\'>\n                  The current function can be used to get the context node in an\n                  XSLT instruction. | <code>current()</code>\n                </span>\n              </div>\n              <div class=\'divLabelContainer\'>\n                <label>\n                  <input type=\'radio\' name=\'activeFunction\' value=\'document\' v-model=\'activeFunction\' @click=\'addFunction($event)\'>\n                  <span data-bold=\'---document()\'>document()</span>\n                </label>\n                <span class=\'spanBubble\'>\n                  The document finds a node-set in an external document, or multiple\n                  external documents, and returns the resulting node-set. |\n                  <code>document(URI [,node-set])</code>\n                </span>\n              </div>\n              <div class=\'divLabelContainer\'>\n                <label>\n                  <input type=\'radio\' name=\'activeFunction\' value=\'element-available\' v-model=\'activeFunction\' @click=\'addFunction($event)\'>\n                  <span data-bold=\'---element-available()\'>element-available()</span>\n                </label>\n                <span class=\'spanBubble\'>\n                  The element-available function determines if an element is available\n                  and returns true or false. | <code>element-available(QName)</code>\n                </span>\n              </div>\n              <div class=\'divLabelContainer\'>\n                <label>\n                  <input type=\'radio\' name=\'activeFunction\' value=\'false\' @click=\'addFunction($event)\'>\n                  <span data-bold=\'---false()\'>false()</span>\n                </label>\n                <span class=\'spanBubble\'>\n                  The false function returns boolean false. | <code>false()</code>\n                </span>\n              </div>\n              <div class=\'divLabelContainer\'>\n                <label>\n                  <input type=\'radio\' name=\'activeFunction\' value=\'floor\' v-model=\'activeFunction\' @click=\'addFunction($event)\'>\n                  <span data-bold=\'---floor()\'>floor()</span>\n                </label>\n                <span class=\'spanBubble\'>\n                  The floor function evaluates a decimal number and returns the\n                  largest integer less than or equal to the decimal number. |\n                  <code>floor(number)</code>\n                </span>\n              </div>\n              <div class=\'divLabelContainer\'>\n                <label>\n                  <input type=\'radio\' name=\'activeFunction\' value=\'format-number\' v-model=\'activeFunction\' @click=\'addFunction($event)\'>\n                  <span data-bold=\'---format-number()\'>format-number()</span>\n                </label>\n                <span class=\'spanBubble\'>\n                  The format-number function evaluates a number and returns a string\n                  representing the number in a given format. |\n                  <code>format-number(number ,pattern [,decimal-format])</code>\n                </span>\n              </div>\n              <div class=\'divLabelContainer\'>\n                <label>\n                  <input type=\'radio\' name=\'activeFunction\' value=\'function-available\' v-model=\'activeFunction\' @click=\'addFunction($event)\'>\n                  <span data-bold=\'---function-available()\'>function-available()</span>\n                </label>\n                <span class=\'spanBubble\'>\n                  The function-available function determines if a given function\n                  is available and returns boolean true or false. |\n                  <code>function-available(name)</code>\n                </span>\n              </div>\n              <div class=\'divLabelContainer\'>\n                <label>\n                  <input type=\'radio\' name=\'activeFunction\' value=\'generate-id\' v-model=\'activeFunction\' @click=\'addFunction($event)\'>\n                  <span data-bold=\'---generate-id()\'>generate-id()</span>\n                </label>\n                <span class=\'spanBubble\'>\n                  The generate-id function generates a unique id for the first node\n                  in a given node-set and returns a string containing that id. |\n                  <code>generate-id( [node-set])</code>\n                </span>\n              </div>\n              <div class=\'divLabelContainer\'>\n                <label>\n                  <input type=\'radio\' name=\'activeFunction\' value=\'key\' v-model=\'activeFunction\' @click=\'addFunction($event)\'>\n                  <span data-bold=\'---key()\'>key()</span>\n                </label>\n                <span class=\'spanBubble\'>\n                  The key function returns a node-set of nodes that have the given\n                  value for the given key. | <code>key(keyname ,value)</code>\n                </span>\n              </div>\n              <div class=\'divLabelContainer\'>\n                <label>\n                  <input type=\'radio\' name=\'activeFunction\' value=\'lang\' v-model=\'activeFunction\' @click=\'addFunction($event)\'>\n                  <span data-bold=\'---lang()\'>lang()</span>\n                </label>\n                <span class=\'spanBubble\'>\n                  The lang function determines whether the context node matches\n                  the given language and returns boolean true or false. |\n                  <code>lang(string)</code>\n                </span>\n              </div>\n              <div class=\'divLabelContainer\'>\n                <label>\n                  <input type=\'radio\' name=\'activeFunction\' value=\'last\' @click=\'addFunction($event)\'>\n                  <span data-bold=\'---last()\'>last()</span>\n                </label>\n                <span class=\'spanBubble\'>\n                  The last function returns a number equal to the context size\n                  from the expression evaluation context. | <code>last()</code>\n                </span>\n              </div>\n              <div class=\'divLabelContainer\'>\n                <label>\n                  <input type=\'radio\' name=\'activeFunction\' value=\'local-name\' v-model=\'activeFunction\' @click=\'addFunction($event)\'>\n                  <span data-bold=\'---local-name()\'>local-name()</span>\n                </label>\n                <span class=\'spanBubble\'>\n                  The local-name function returns a string representing the local\n                  name of the first node in a given node-set. |\n                  <code>local-name( [node-set])</code>\n                </span>\n              </div>\n              <div class=\'divLabelContainer\'>\n                <label>\n                  <input type=\'radio\' name=\'activeFunction\' value=\'name\' v-model=\'activeFunction\' @click=\'addFunction($event)\'>\n                  <span data-bold=\'---name()\'>name()</span>\n                </label>\n                <span class=\'spanBubble\'>\n                  The name function returns a string representing the QName of the\n                  first node in a given node-set. | <code>name([node-set])</code>\n                </span>\n              </div>\n              <div class=\'divLabelContainer\'>\n                <label>\n                  <input type=\'radio\' name=\'activeFunction\' value=\'namespace-url\' v-model=\'activeFunction\' @click=\'addFunction($event)\'>\n                  <span data-bold=\'---namespace-url()\'>namespace-url()</span>\n                </label>\n                <span class=\'spanBubble\'>\n                  The namespace-uri function returns a string representing the\n                  namespace URI of the first node in a given node-set. |\n                  <code>namespace-uri([node-set])</code>\n                </span>\n              </div>\n              <div class=\'divLabelContainer\'>\n                <label>\n                  <input type=\'radio\' name=\'activeFunction\' value=\'normalize-space\' v-model=\'activeFunction\' @click=\'addFunction($event)\'>\n                  <span data-bold=\'---normalize-space()\'>normalize-space()</span>\n                </label>\n                <span class=\'spanBubble\'>\n                  The normalize-space function strips leading and trailing white-space\n                  from a string, replaces sequences of whitespace characters by a\n                  single space, and returns the resulting string. |\n                  <code>normalize-space([string])</code>\n                </span>\n              </div>\n              <div class=\'divLabelContainer\'>\n                <label>\n                  <input type=\'radio\' name=\'activeFunction\' value=\'not\' v-model=\'activeFunction\' @click=\'addFunction($event)\'>\n                  <span data-bold=\'---not()\'>not()</span>\n                </label>\n                <span class=\'spanBubble\'>\n                  The not function evaluates a boolean expression and returns the\n                  opposite value. | <code>not(expression)</code>\n                </span>\n              </div>\n              <div class=\'divLabelContainer\'>\n                <label>\n                  <input type=\'radio\' name=\'activeFunction\' value=\'number\' v-model=\'activeFunction\' @click=\'addFunction($event)\'>\n                  <span data-bold=\'---number()\'>number()</span>\n                </label>\n                <span class=\'spanBubble\'>\n                  The number function converts an object to a number and returns the\n                  number. | <code>number([object])</code>\n                </span>\n              </div>\n              <div class=\'divLabelContainer\'>\n                <label>\n                  <input type=\'radio\' name=\'activeFunction\' value=\'position\' @click=\'addFunction($event)\'>\n                  <span data-bold=\'---position()\'>position()</span>\n                </label>\n                <span class=\'spanBubble\'>\n                  The position function returns a number equal to the context position\n                  from the expression evaluation context. | <code>position()</code>\n                </span>\n              </div>\n              <div class=\'divLabelContainer\'>\n                <label>\n                  <input type=\'radio\' name=\'activeFunction\' value=\'round\' v-model=\'activeFunction\' @click=\'addFunction($event)\'>\n                  <span data-bold=\'---round()\'>round()</span>\n                </label>\n                <span class=\'spanBubble\'>\n                  The round function returns a number that is the nearest integer to\n                  the given number. | <code>round(decimal)</code>\n                </span>\n              </div>\n              <div class=\'divLabelContainer\'>\n                <label>\n                  <input type=\'radio\' name=\'activeFunction\' value=\'starts-with\' v-model=\'activeFunction\' @click=\'addFunction($event)\'>\n                  <span data-bold=\'---starts-with()\'>starts-with()</span>\n                </label>\n                <span class=\'spanBubble\'>\n                  The starts-with checks whether the first string starts with the\n                  second string and returns true or false. |\n                  <code>starts-with(haystack, needle)</code>\n                </span>\n              </div>\n              <div class=\'divLabelContainer\'>\n                <label>\n                  <input type=\'radio\' name=\'activeFunction\' value=\'string\' v-model=\'activeFunction\' @click=\'addFunction($event)\'>\n                  <span data-bold=\'---string()\'>string()</span>\n                </label>\n                <span class=\'spanBubble\'>\n                  The string function converts the given argument to a string. |\n                  <code>string([object])</code>\n                </span>\n              </div>\n              <div class=\'divLabelContainer\'>\n                <label>\n                  <input type=\'radio\' name=\'activeFunction\' value=\'string-length\' v-model=\'activeFunction\' @click=\'addFunction($event)\'>\n                  <span data-bold=\'---string-length()\'>string-length()</span>\n                </label>\n                <span class=\'spanBubble\'>\n                  The string-length function returns a number equal to the number\n                  of characters in a given string. | <code>string-length([string])</code>\n                </span>\n              </div>\n              <div class=\'divLabelContainer\'>\n                <label>\n                  <input type=\'radio\' name=\'activeFunction\' value=\'substring\' v-model=\'activeFunction\' @click=\'addFunction($event)\'>\n                  <span data-bold=\'---substring()\'>substring()</span>\n                </label>\n                <span class=\'spanBubble\'>\n                  The substring function returns a part of a given string. |\n                  <code>substring(string ,start [,length])</code>\n                </span>\n              </div>\n              <div class=\'divLabelContainer\'>\n                <label>\n                  <input type=\'radio\' name=\'activeFunction\' value=\'substring-after\' v-model=\'activeFunction\' @click=\'addFunction($event)\'>\n                  <span data-bold=\'---substring-after()\'>substring-after()</span>\n                </label>\n                <span class=\'spanBubble\'>\n                  The substring-after function returns a string that is the rest of\n                  a given string after a given substring. |\n                  <code>substring-after(haystack ,needle)</code>\n                </span>\n              </div>\n              <div class=\'divLabelContainer\'>\n                <label>\n                  <input type=\'radio\' name=\'activeFunction\' value=\'substring-before\' v-model=\'activeFunction\' @click=\'addFunction($event)\'>\n                  <span data-bold=\'---substring-before()\'>substring-before()</span>\n                </label>\n                <span class=\'spanBubble\'>\n                  The substring-before function returns a string that is the part of\n                  a given string before a given substring. |\n                  <code>substring-before(haystack ,needle)</code>\n                </span>\n              </div>\n              <div class=\'divLabelContainer\'>\n                <label>\n                  <input type=\'radio\' name=\'activeFunction\' value=\'sum\' v-model=\'activeFunction\' @click=\'addFunction($event)\'>\n                  <span data-bold=\'---sum()\'>sum()</span>\n                </label>\n                <span class=\'spanBubble\'>\n                  The sum function returns a number that is the sum of the numeric\n                  values of each node in a given node-set. | <code>sum(node-set)</code>\n                </span>\n              </div>\n              <div class=\'divLabelContainer\'>\n                <label>\n                  <input type=\'radio\' name=\'activeFunction\' value=\'system-property\' v-model=\'activeFunction\' @click=\'addFunction($event)\'>\n                  <span data-bold=\'---system-property()\'>system-property()</span>\n                </label>\n                <span class=\'spanBubble\'>\n                  The system-property function returns an object representing the\n                  given system-property. | <code>system-property(name)</code>\n                </span>\n              </div>\n              <div class=\'divLabelContainer\'>\n                <label>\n                  <input type=\'radio\' name=\'activeFunction\' value=\'translate\' v-model=\'activeFunction\' @click=\'addFunction($event)\'>\n                  <span data-bold=\'---translate()\'>translate()</span>\n                </label>\n                <span class=\'spanBubble\'>\n                  The translate function evaluates a string and a set of characters\n                  to translate and returns the translated string. |\n                  <code>translate(string, abc, XYZ)</code>\n                </span>\n              </div>\n              <div class=\'divLabelContainer\'>\n                <label>\n                  <input type=\'radio\' name=\'activeFunction\' value=\'true\' @click=\'addFunction($event)\'>\n                  <span data-bold=\'---true()\'>true()</span>\n                </label>\n                <span class=\'spanBubble\'>\n                  The true function returns a boolean value of true. | <code>true()</code>\n                </span>\n              </div>\n            </div>\n          </div>\n\n\n\n\n          <div class=\'operators\'>\n            <h3>Operators</h3>\n            <div class=\'divOperatorsInputs\'>\n              <div class=\'divLabelContainer\'>\n                <label>\n                  <input type=\'radio\' name=\'inputOperator\' value=\'\' v-model=\'operator\'>\n                  None\n                </label>\n                <span class=\'spanBubble\'>No operator selected.</span>\n              </div>\n              <div class=\'divLabelContainer\'>\n                <label>\n                  <input type=\'radio\' name=\'inputOperator\' value=\'and\' v-model=\'operator\' @click=\'addOperators($event)\'>\n                  <span data-bold=\'---and\'>and</span>\n                </label>\n                <span class=\'spanBubble\'>Boolean. Two conditions need to be true.</span>\n              </div>\n              <div class=\'divLabelContainer\'>\n                <label>\n                  <input type=\'radio\' name=\'inputOperator\' value=\'or\' v-model=\'operator\' @click=\'addOperators($event)\'>\n                  <span data-bold=\'---or\'>or</span>\n                </label>\n                <span class=\'spanBubble\'>Boolean. One of two conditions need to be true.</span>\n              </div>\n              <div class=\'divLabelContainer\'>\n                <label>\n                  <input type=\'radio\' name=\'inputOperator\' value=\'|\' v-model=\'operator\' @click=\'addOperators($event)\'>\n                  <span data-bold=\'---|\'>|</span>\n                </label>\n                <span class=\'spanBubble\'>Two node sets are computed.</span>\n              </div>\n              <div class=\'divLabelContainer\'>\n                <label>\n                  <input type=\'radio\' name=\'inputOperator\' value=\'=\' v-model=\'operator\' @click=\'addOperators($event)\'>\n                  <span data-bold=\'---=\'>=</span>\n                </label>\n                <span class=\'spanBubble\'>Boolean. Contition needs to be equal to a value.</span>\n              </div>\n              <div class=\'divLabelContainer\'>\n                <label>\n                  <input type=\'radio\' name=\'inputOperator\' value=\'!=\' v-model=\'operator\' @click=\'addOperators($event)\'>\n                  <span data-bold=\'---!=\'>!=</span>\n                </label>\n                <span class=\'spanBubble\'>Not equal. Condition needs to not be equal to a value.</span>\n              </div>\n              <div class=\'divLabelContainer\'>\n                <label>\n                  <input type=\'radio\' name=\'inputOperator\' value=\'+\' v-model=\'operator\' @click=\'addOperators($event)\'>\n                  <span data-bold=\'---+\'>+</span>\n                </label>\n                <span class=\'spanBubble\'>Addition.</span>\n              </div>\n              <div class=\'divLabelContainer\'>\n                <label>\n                  <input type=\'radio\' name=\'inputOperator\' value=\'-\' v-model=\'operator\' @click=\'addOperators($event)\'>\n                  <span data-bold=\'----\'>-</span>\n                </label>\n                <span class=\'spanBubble\'>Subtraction.</span>\n              </div>\n              <div class=\'divLabelContainer\'>\n                <label>\n                  <input type=\'radio\' name=\'inputOperator\' value=\'*\' v-model=\'operator\' @click=\'addOperators($event)\'>\n                  <span data-bold=\'---*\'>*</span>\n                </label>\n                <span class=\'spanBubble\'>Multiplication.</span>\n              </div>\n              <div class=\'divLabelContainer\'>\n                <label>\n                  <input type=\'radio\' name=\'inputOperator\' value=\'div\' v-model=\'operator\' @click=\'addOperators($event)\'>\n                  <span data-bold=\'---div\'>div</span>\n                </label>\n                <span class=\'spanBubble\'>Division</span>\n              </div>\n              <div class=\'divLabelContainer\'>\n                <label>\n                  <input type=\'radio\' name=\'inputOperator\' value=\'<\' v-model=\'operator\' @click=\'addOperators($event)\'>\n                  <span data-bold=\'---&lt;\'>&lt;</span>\n                </label>\n                <span class=\'spanBubble\'>Boolean. Smaller than.</span>\n              </div>\n              <div class=\'divLabelContainer\'>\n                <label>\n                  <input type=\'radio\' name=\'inputOperator\' value=\'<=\' v-model=\'operator\' @click=\'addOperators($event)\'>\n                  <span data-bold=\'---&lt;=\'>&lt;=</span>\n                </label>\n                <span class=\'spanBubble\'>Boolean. Smaller or equal than.</span>\n              </div>\n              <div class=\'divLabelContainer\'>\n                <label>\n                  <input type=\'radio\' name=\'inputOperator\' value=\'>\' v-model=\'operator\' @click=\'addOperators($event)\'>\n                  <span data-bold=\'---&gt;\'>&gt;</span>\n                </label>\n                <span class=\'spanBubble\'>Boolean. Greater than.</span>\n              </div>\n              <div class=\'divLabelContainer\'>\n                <label>\n                  <input type=\'radio\' name=\'inputOperator\' value=\'>=\' v-model=\'operator\' @click=\'addOperators($event)\'>\n                  <span data-bold=\'---&gt;=\'>&gt;=</span>\n                </label>\n                <span class=\'spanBubble\'>Boolean. Greater or equal than.</span>\n              </div>\n              <div class=\'divLabelContainer\'>\n                <label>\n                  <input type=\'radio\' name=\'inputOperator\' value=\'mod\' v-model=\'operator\' @click=\'addOperators($event)\'>\n                  <span data-bold=\'---mod\'>mod</span>\n                </label>\n                <span class=\'spanBubble\'>Modulus</span>\n              </div>\n            </div><!-- End of divOperatorsInputs -->\n          </div><!-- End of operators section -->\n\n\n\n\n          <div class=\'attributes\'>\n            <h3>Attributes</h3>\n            <div class=\'divAttributesInputs\'>\n              <div class=\'divLabelContainer\'>\n                <label>\n                  <input type=\'radio\' name=\'attribute\' value=\'\' v-model=\'attribute\'>\n                  <span data-bold=\'---None\'>None</span>\n                </label>\n                <span class=\'spanBubble\'>No attribute selected</span>\n              </div>\n              <div class=\'divLabelContainer\'>\n                <label>\n                  <input type=\'radio\' name=\'attribute\' value=\'@alt\' v-model=\'attribute\' @click=\'addAttributes($event)\'>\n                  <span data-bold=\'---@alt\'>@alt</span>\n                </label>\n                <span class=\'spanBubble\'>Attribute alt</span>\n              </div>\n              <div class=\'divLabelContainer\'>\n                <label>\n                  <input type=\'radio\' name=\'attribute\' value=\'@class\' v-model=\'attribute\' @click=\'addAttributes($event)\'>\n                  <span data-bold=\'---@class\'>@class</span>\n                </label>\n                <span class=\'spanBubble\'>Attribute class</span>\n              </div>\n              <div class=\'divLabelContainer\'>\n                <label>\n                  <input type=\'radio\' name=\'attribute\' value=\'@href\' v-model=\'attribute\' @click=\'addAttributes($event)\'>\n                  <span data-bold=\'---@href\'>@href</span>\n                </label>\n                <span class=\'spanBubble\'>Attribute href</span>\n              </div>\n              <div class=\'divLabelContainer\'>\n                <label>\n                  <input type=\'radio\' name=\'attribute\' value=\'@id\' v-model=\'attribute\' @click=\'addAttributes($event)\'>\n                  <span data-bold=\'---@id\'>@id</span>\n                </label>\n                <span class=\'spanBubble\'>Attribute id</span>\n              </div>\n              <div class=\'divLabelContainer\'>\n                <label>\n                  <input type=\'radio\' name=\'attribute\' value=\'@name\' v-model=\'attribute\' @click=\'addAttributes($event)\'>\n                  <span data-bold=\'---@name\'>@name</span>\n                </label>\n                <span class=\'spanBubble\'>Attribute name</span>\n              </div>\n              <div class=\'divLabelContainer\'>\n                <label>\n                  <input type=\'radio\' name=\'attribute\' v-model=\'attribute\' value=\'@src\' @click=\'addAttributes($event)\'>\n                  <span data-bold=\'---@src\'>@src</span>\n                </label>\n                <span class=\'spanBubble\'>Attribute src</span>\n              </div>\n              <div class=\'divLabelContainer\'>\n                <label>\n                  <input type=\'radio\' name=\'attribute\' v-model=\'attribute\' value=\'@style\' @click=\'addAttributes($event)\'>\n                  <span data-bold=\'---@style\'>@style</span>\n                </label>\n                <span class=\'spanBubble\'>Attribute style</span>\n              </div>\n              <div class=\'divLabelContainer\'>\n                <label>\n                  <input type=\'radio\' name=\'attribute\' value=\'@title\' v-model=\'attribute\' @click=\'addAttributes($event)\'>\n                  <span data-bold=\'---@title\'>@title</span>\n                </label>\n                <span class=\'spanBubble\'>Attribute title</span>\n              </div>\n              <div class=\'divLabelContainer\'>\n                <label>\n                  <input type=\'radio\' name=\'attribute\' value=\'@value\' v-model=\'attribute\' @click=\'addAttributes($event)\'>\n                  <span data-bold=\'---@value\'>@value</span>\n                </label>\n                <span class=\'spanBubble\'>Attribute value</span>\n              </div>\n              <div class=\'divLabelContainer\'>\n                <label>\n                  <input type=\'text\' name=\'attribute\' value=\'\' v-model=\'attribute\' @keyup.enter=\'addAttributes($event)\' size=\'8\'>\n                  <span data-bold=\'---Other\'>Other</span>\n                </label>\n                <span class=\'spanBubble\'>Enter other attribute.</span>\n              </div>\n            </div>\n          </div>\n\n\n\n\n          <div class=\'parameters\'>\n            <div class=\'gridParamsHeading\'>\n              <h3>{{activeFunctionArr[activeFunctionArr.length - 1]}} Parameters</h3>\n            </div>\n\n\n            <div class=\'gridParamsLevel1\'>\n              <div class=\'divCheckboxParams\'>\n                <div class=\'divLabelContainer\'>\n                  <label v-show=\'showNumberInput\'>\n                    <input type=\'checkbox\' name=\'numberEntry\' value=\'\' v-model=\'numberEntry\'>\n                    <span data-bold=\'---Number entry\'>Number entry</span>\n                  </label>\n                  <span class=\'spanBubble\'>\n                    Select this option if the value entered needs to be a number\n                  </span>\n                </div>\n                <div class=\'divLabelContainer\'>\n                  <label v-show=\'showTranslateInput\'>\n                    <input type=\'checkbox\' name=\'translateString\' v-model=\'translateString\'>\n                    <span data-bold=\'---Both Upper and lowercase\'>Both Upper and lowercase</span>\n                  </label>\n                  <span class=\'spanBubble\'>\n                    Select this option if you want the string to be translated\n                  </span>\n                </div>\n              </div>\n              <div class=\'divStringParam\'>\n                <div class=\'divLabelContainer\'>\n                  <label  v-show=\'showParamInput\'>\n                    <input type=\'text\' name=\'parameterString\' v-model=\'parameterString\'  @keyup.enter=\'addParameters($event)\'>\n                    <span data-bold=\'---Value\'>Value</span>\n                  </label>\n                  <span class=\'spanBubble\'>\n                    Enter your parameter value. Press \'enter\' when done.\n                  </span>\n                </div>\n              </div>\n            </div>\n\n            <div class=\'gridParamsLevel2\'>\n              <div class=\'divAlert\'>\n                {{paramAlert}}\n              </div>\n            </div>\n          </div>\n\n        </section>\n        <!-- End of section Options -->\n\n\n        <section class=\'sectionElements\'>\n          <div class=\'divFunctionsSequenceArrElements\'>\n            <div class=\'divFunctionsSequenceArrHeader\'>\n            <h3>Active Functions</h3>\n            </div>\n\n            <div class=\'divFunctionsSequenceArrInputs\'>\n              <span v-for=\'(element, idx) in functionsSequenceArr\' :key=\'element.id\'>\n                <span v-if=\'functionsSequenceArr[idx].toString().includes(\'(\') && !functionsSequenceArr[idx].toString().includes(\'/\')\'>\n                  <br>\n                  <label>\n                    <span v-once class=\'spanActiveFunctionTitle\'>\n                      {{element.replace(/(\((.*)?\)?)/g, \'\')}}:\n                    </span>\n                    <input type=\'text\' :name=\'idx\'  :size=\'functionsSequenceArr[idx].toString().length + 1\' v-model=\'functionsSequenceArr[idx]\' @keyup=\'checkAndPushToPathArray()\'>\n                  </label>\n                </span>\n\n\n                <label v-else>\n                  <input type=\'text\' :name=\'idx\'  :size=\'functionsSequenceArr[idx].toString().length + 1\' v-model=\'functionsSequenceArr[idx]\' @keyup=\'checkAndPushToPathArray()\'>\n                </label>\n\n              </span>\n            </div>\n\n            <div class=\'divFunctionsConcatButton\'>\n              <input class=\'buttonForAction\' id=\'buttonConcatAxes\' type=\'button\' name=\'\' value=\'Concat last two axes\' @click=\'concatFunctionElements()\'>\n            </div>\n          </div>\n\n          <div class=\'divFunctionConcatenation\'>\n            <h3>Concatenated Function elements</h3>\n            {{functionsSequenceArrJoin}}\n          </div>\n\n          <div class=\'divPathArrayElements\'>\n            <h3>All elements</h3>\n            <label v-for=\'(element, idx) in pathArray\'>\n              <input type=\'text\' :name=\'idx\' :size=\'pathArray[idx].toString().length\' v-model=\'pathArray[idx]\'>\n            </label>\n          </div>\n        </section>\n        <!-- End of section Elements -->\n\n        <section class=\'sectionResult\'>\n\n          <div class=\'divFooter\'>\n            <div class=\'divFooterHeader\'>\n              <h3>xPath Generator</h3>\n              <span class=\'spanBubble\'>\n                <img src=\'http://infohost.nmt.edu/tcc/help/pubs/xslt/axes.jpg\' alt=\'xPath Chart\'>\n              </span>\n            </div>\n            <h5><a href=\'http://addeventlistener.xyz\' target=\'_blank\'>@papostolopoulos</a> - 2019</h5>\n          </div>\n\n          <div class=\'divResult\'>\n            <div class=\'divResultHeader\'>\n              <h3>xPath Result</h3>\n            </div>\n\n            <div class=\'divResultTextArea\'>\n              <textarea name=\'textAreaFullPath\' id=\'textAreaFullPath\' :value=\'fullPath\'></textarea>\n              <br>\n              <label for=\'\'>\n                <input type=\'button\' name=\'buttonCopyxPath\' id=\'buttonCopyxPath\' value=\'Copy xPath\' @click=\'copyxPath()\'>\n              </label>\n            </div>\n\n          </div>\n\n        </section>\n        <!-- End of section Result -->\n\n\n      </div><!-- End of divContainer -->\n    </main>\n\n  </body>\n\n\n\n\n\n\n\n\n\n  <script>\n\n    var app = new Vue({\n      el: \'#mainSlot\',\n      data: {\n        axis:\'\',\n        node: \'\', //The node that is added after the axis\n        brackets: \'\', // If new brackets are opening or not\n        operator: \'\', //or, and, and not, not\n        activeFunction: \'\', //populated when a function is selected - convert into array?\n        activeFunctionArr: [],\n        translateString: false, //checkbox for when the \'translate\' option is selected\n        numberEntry: false, //When true, the submited entry will not be in quotes\n        absoluteRelativeAxis: \'absolute\',\n        parameterString: \'\', //populated when a string is entered in the input slot for each function (in parameters)\n        paramAlert: \'\',\n        //Perhaps need to modify this to get multiple values\n        //Not sure if I should use the above\n        attribute: \'\', //Attributes that are inside functions or brackets\n        pathArray: [], //array with full path of all different additions\n        functionsSequenceArr: [], //array of all functions and parameters that are selected\n        //functionsCounter: 0\n\n      }, //End of data\n      methods:{\n        //Adds strings to the pathArray OR\n        //If there are strings in the functionsSequenceArr then it adds to the functionsSequenceArr instead\n        addBranch(event){\n          this.zeroProperties(event.target.name);\n          let axisEventValue = this.absoluteRelativeAxis === \'absolute\' ?\n          this.axis + event.target.value : this.axis.slice(1) + event.target.value\n\n          //Add the string to the function array\n          if (this.functionsCounter > 0) {\n            console.log(\'In functionsCounter\');\n            let functionStr = this.functionsSequenceArr[this.functionsSequenceArr.length-1];\n            // Add a comma if this is not the beginning of the function\n            if(functionStr[functionStr.toString().length-1] !== \'(\') this.functionsSequenceArr.push(\', \');\n\n            this.functionsSequenceArr.push(axisEventValue);\n          }\n          //Add string to the path array\n          else this.pathArray.push(axisEventValue);\n\n          this.node = \'\';\n        }, //End of AddBranch\n\n\n\n        addBrackets(event){\n          this.zeroProperties(event.target.name);\n          if (this.functionsCounter > 0) {\n            this.functionsSequenceArr.push(event.target.value);\n            if (event.target.value === \')\') {\n              //this.functionsCounter --;\n              this.activeFunctionArr.pop();\n              this.activeFunction = this.activeFunctionArr[this.activeFunctionArr.length - 1] || \'\';\n              return this.checkAndPushToPathArray();\n              // this is supposed to be added to the computed properties\n              // if (this.functionsCounter === 0) {\n              //   this.pathArray.push(this.functionsSequenceArr.join(\'\'));\n              //   this.functionsSequenceArr = [];\n              // }\n            }\n            if(event.target.value === \'(\'){\n              //this.functionsCounter ++;\n              this.activeFunctionArr.push(this.activeFunctionArr[this.activeFunctionArr.length - 1]);\n            }\n          }\n          else if(this.pathArray.length > 0 && event.target.value !== \')\'){\n            this.pathArray.push(event.target.value);\n          }\n        }, //End of addBrackets\n\n\n\n        addOperators(event){\n          this.zeroProperties(event.target.name);\n          let operatorsRegex = /and|or|\||=|!=|\+|-|\*|div|<|<=|>|>=|mod/;\n          console.log(\'in addOperator\');\n          console.log(this.functionsSequenceArr[this.functionsSequenceArr.length - 1]);\n          //When the functions counter is larger than 0 or\n          //when the functionsCounter is zero but there are elements in the functionsSequenceArr\n          if ((this.functionsCounter > 0 ||\n          /[a-z]+\(\)$/.test(this.functionsSequenceArr[this.functionsSequenceArr.length - 1])) &&\n          !operatorsRegex.test(this.functionsSequenceArr[this.functionsSequenceArr.length - 1])) {\n            this.functionsSequenceArr.push(event.target.value);\n          }\n          //functionsCounter is 0 and functionsSequenceArr is empty so push in pathArray\n          else if(this.pathArray.length !== 0 &&\n          !operatorsRegex.test(this.pathArray[this.pathArray.length - 1])){\n            console.log(\'else if for pushing operator in the pathArray\');\n            this.pathArray.push(event.target.value);\n          }\n          console.log(\'about to hit zero\', this.operator);\n          this.operator = \'\';\n          console.log(this.operator);\n        },\n\n\n\n        addAttributes(event){\n\n          if (this.functionsCounter === 0 && this.pathArray.length === 0) {\n            this.paramAlert = \'You need to enter a node path or a function first\';\n            return;\n          }\n\n          if (this.functionsCounter > 0 || this.functionsSequenceArr.length > 0) {\n            console.log(\'if statemenet for adding attribute in the functionsSequenceArr\');\n            if (this.functionsSequenceArr[this.functionsSequenceArr.length - 1].includes(\'@\')) {\n              this.paramAlert = \'An attribute already exists in the previous entry.\';\n            }\n            else {\n              //If the previous element in the array is a branch, then push the attribute with a forward\n              //slash, otherwise just push the attribute\n              this.functionsSequenceArr[this.functionsSequenceArr.length - 1].includes(\'::\') ||\n              this.functionsSequenceArr[this.functionsSequenceArr.length - 1].includes(\'//\') ||\n              this.functionsSequenceArr[this.functionsSequenceArr.length - 1] === \'.\' ?\n              this.functionsSequenceArr.push(\'/\' + event.target.value) :\n              this.functionsSequenceArr.push(event.target.value);\n              this.attribute = \'\';\n              return this.zeroProperties(event.target.name);\n            }\n          }\n\n          if(this.pathArray.length !== 0) {\n            if (this.pathArray[this.pathArray.length - 1].includes(\'@\')) {\n              this.paramAlert = \'An attribute already exists in the previous entry.\'\n            }\n            else {\n              console.log(\'else if for adding attribute in the pathArray\');\n              //If the previous element in the array is a branch, then push the attribute with a forward\n              //slash, otherwise just push the attribute\n              this.pathArray[this.pathArray.length - 1].includes(\'::\') ||\n              this.pathArray[this.pathArray.length - 1].includes(\'//\') ||\n              this.pathArray[this.pathArray.length - 1] === \'.\'?\n              this.pathArray.push(\'/\' + event.target.value) :\n              this.pathArray.push(event.target.value);\n              this.attribute = \'\';\n              return this.zeroProperties(event.target.name);\n            }\n          }\n        },\n\n\n\n        //Adds a function name with parenthesis ( in the functionsSequenceArr\n        addFunction(event){\n          this.zeroProperties(event.target.name);\n\n          //Alert the user that the function only takes node sets\n          if (event.target.value === \'count\') {\n            this.paramAlert = \'This function only takes node sets\';\n          }\n\n          //Mark the number entry checkbox as selected\n          if (event.target.value === \'ceiling\' ||\n          event.target.value === \'floor\' ||\n          event.target.value === \'round\') {\n            this.numberEntry = true;\n            this.paramAlert = \'This function only takes a number entry\';\n          }\n\n\n\n          console.log(\'In add function. The counter before the addition is:\', this.functionsCounter);\n\n          //Add a comma before if the previous entry is a parameter and not a function\n          if (this.functionsSequenceArr.length > 0) {\n            let lastElement = this.functionsSequenceArr[this.functionsSequenceArr.length-1];\n            if (!/[\(\)]/.test(lastElement[lastElement.length - 1]) &&\n            !lastElement[lastElement.length - 1].includes(\'node()\')) {\n              this.functionsSequenceArr.push(\',\');\n            }\n          }\n\n          //If the functions do not take any parameters, then open and close the parenthesis\n          if (event.target.value === \'current\' ||\n              event.target.value === \'false\' ||\n              event.target.value === \'last\' ||\n              event.target.value === \'position\' ||\n              event.target.value === \'true\') {\n            this.functionsSequenceArr.push(event.target.value + \'()\'); //Array with all the functions and params\n            return this.checkAndPushToPathArray();\n          }\n          // otherwise just open the parenthesis\n          else {\n            this.functionsSequenceArr.push(event.target.value + \'(\');\n            this.activeFunctionArr.push(event.target.value);\n            //this.functionsCounter ++;\n          }\n        }, //End of addFunction\n\n\n\n        addParameters(event){\n\n          //When a parameter is added in a function\n          if (this.functionsCounter > 0) {\n            console.log(\'functionsCounter larger than 0. It is\', this.functionsCounter);\n            console.log(\'this.numberEntry is\', this.numberEntry, \'and this.translateString is\', this.translateString);\n            //If number entry has been selected\n            if(this.numberEntry) return this.evaluateAndEnterNumberValue(event.target.value, this.functionsSequenceArr);\n            //Translate option has been selected\n            else if (this.translateString) return this.translateAndPush(event.target.value);\n            //The string is pushed in the functionsSequenceArr\n            else{\n              let lastElement = this.functionsSequenceArr[this.functionsSequenceArr.length-1];\n              if (lastElement[lastElement.length - 1] === \'(\') {\n                this.functionsSequenceArr.push(\'\\'\' + event.target.value + \'\\'\')\n              }\n              else {\n                this.functionsSequenceArr.push(\',\');\n                this.functionsSequenceArr.push(\'\\'\' + event.target.value + \'\\'\')\n              }\n\n              this.parameterString = \'\';\n              return this.zeroProperties(event.target.name);\n            }\n          }\n          //When a parameter is added in the functionsSequenceArr\n          else if (this.functionsSequenceArr.length > 0) {\n            console.log(\'functionsCounter 0 but functionsSequenceArr has elements\');\n            if(this.numberEntry) return this.evaluateAndEnterNumberValue(event.target.value, this.functionsSequenceArr);\n            else {\n              this.functionsSequenceArr.push(\'\\'\' + event.target.value + \'\\'\');\n              this.parameterString = \'\';\n              return this.zeroProperties(event.target.name);\n            }\n          }\n          //When a parameter is added in the pathArray\n          else {\n            console.log(\'functionsCounter and functionsSequenceArr are both empty\');\n            //If number entry has been selected\n            if(this.numberEntry) return this.evaluateAndEnterNumberValue(event.target.value, this.pathArray);\n            else {\n              this.pathArray.push(\'\\'\' + event.target.value + \'\\'\');\n              this.parameterString = \'\';\n              return this.zeroProperties(event.target.name);\n            }\n          }\n\n          //When a parameter is added after an operator but not in a function\n          if (this.operator !== \'\') {\n            if(this.numberEntry) return this.evaluateAndEnterNumberValue(event.target.name, this.pathArray)\n            else {\n              this.pathArray.push(\'\\'\' + event.target.value + \'\\'\');\n              this.parameterString = \'\';\n              return this.zeroProperties(event.target.name);\n            }\n          }\n\n      }, //End of addParameters()\n\n\n\n        //Concatenates the last elements that are in the functionsSequenceArr and are separated by a comma\n        concatFunctionElements(){\n          console.log(this.functionsSequenceArr);\n\n          if (this.functionsSequenceArr.length > 3 &&\n          this.functionsSequenceArr[this.functionsSequenceArr.length-2] === \', \' &&\n          this.functionsSequenceArr[this.functionsSequenceArr.length-3][0] === \'/\') {\n            this.functionsSequenceArr[this.functionsSequenceArr.length-3] += this.functionsSequenceArr.pop();\n            this.functionsSequenceArr.pop();\n          }\n          else {\n            this.paramAlert = \'The array is not big enough for concatenation or the element for concatenation is not an axis\';\n          }\n        }, //End of concat Function Elements\n\n\n\n        evaluateAndEnterNumberValue(eventValue, arr){\n          if (!Number(eventValue)) {\n            this.parameterString = \'\';\n            this.numberEntry = false;\n            this.paramAlert = \'Invalid number entry\';\n          }\n          else {\n            arr.push(Number(eventValue));\n            this.paramAlert = \'\';\n            this.parameterString = \'\';\n            this.zeroProperties(event.target.name)\n          }\n        },\n\n\n\n        translateAndPush(eventValue){\n          console.log(\'In translate\', this.functionsSequenceArr[this.functionsSequenceArr.length - 1]);\n          if (this.functionsSequenceArr[this.functionsSequenceArr.length - 1].endsWith(\'(\')) {\n            this.paramAlert = \'You need to enter an attribute or an axis before the string parameter\';\n            return;\n          }\n          else {\n            let translateStringElements = \'\';\n            for (let i = 0; i < this.parameterString.length; i++) {\n              if(!translateStringElements.includes(this.parameterString[i].toLowerCase()) && /\w/.test(this.parameterString[i]))\n              translateStringElements += this.parameterString[i].toLowerCase();\n            }\n            this.functionsSequenceArr.push(\`translate(${this.functionsSequenceArr.pop()}, \'${translateStringElements.toUpperCase()}\', \'${translateStringElements}\'), \'${eventValue.toLowerCase()}\'\`);\n            console.log(\'close to zero\', event.target.name);\n            this.parameterString = \'\';\n            this.zeroProperties(event.target.name);\n          }\n        }, //End of translateAndPush\n\n\n\n        //Zero all the properties of the data object\n        zeroProperties(eventName){\n          if(eventName !== \'addNode\') this.axis = \'\';\n          if(eventName !== \'brackets\') this.brackets = \'\';\n          if(eventName !== \'inputOperator\') this.operator = \'\';\n          // this.activeFunction = \'\';\n          this.translateString = false;\n          this.numberEntry = false;\n          this.paramAlert = \'\';\n          if(eventName !== \'attribute\') this.attribute = \'\';\n          if(eventName !== \'parameterString\') this.parameterString = \'\';\n        }, //End of zero properties\n\n\n\n        adjustLabelSize(){\n          let labels = document.getElementsByClassName(\'divFunctionsInputs\')[0].children;\n          for (var i = 0; i < labels.length; i++) {\n            let spanText = labels[i].children[1].textContent;\n            if (spanText.length > 15) labels[i].className += \'functionSpansFontSize\';\n          }\n        },\n\n\n\n        updateFunctionsSequenceArr(event){\n          console.log(\'in function\');\n          console.log(event.target.value);\n          console.log(event.target.name);\n        },\n\n\n\n\n        checkAndPushToPathArray(){\n          console.log(\'In checkAndPushToPathArray\');\n          if (this.functionsCounter === 0) {\n            this.pathArray.push(this.functionsSequenceArr.join(\'\'));\n            this.functionsSequenceArr = [];\n          }\n        },\n\n\n\n        copyxPath(){\n          document.getElementById(\'textAreaFullPath\').select();\n          document.execCommand(\'copy\');\n        }\n\n\n      }, //End of methods\n      computed: {\n        fullPath(){\n          let fullPath = this.pathArray.join(\'\');\n          let replaceStrArr = [\n            {oldStr: /\)or/g, newStr: \'or\n\'},\n            {oldStr: /\|/g, newStr: \'\n|\n\'}\n          ];\n\n          replaceStrArr.forEach(function(el){\n            fullPath = fullPath.replace(el.oldStr, el.newStr);\n          });\n\n          return fullPath;\n        },\n\n        functionsSequenceArrJoin(){\n          return this.functionsSequenceArr.join(\'\');\n        },\n\n\n        //For displaying the Number checkbox\n        showNumberInput(){\n          return this.activeFunction === \'boolean\' ||\n          this.activeFunction === \'ceiling\' ||\n          this.activeFunction === \'choose\' ||\n          this.activeFunction === \'floor\' ||\n          this.activeFunction === \'position\' ||\n          this.activeFunction === \'round\' ||\n          this.activeFunction === \'sum\' ||\n          this.activeFunction === \'\'\n          this.operator !== \'\'\n          ? true : false;\n        },\n\n\n        //For displaying the translate checkbox\n        showTranslateInput(){\n          return this.activeFunction === \'contains\' ? true : false;\n        },\n\n        showParamInput(){\n          return this.activeFunction !== \'count\'\n        },\n\n        functionsCounter(){\n          return this.functionsSequenceArr.join(\'\').replace(/[^\(]/g,\'\').length -\n          this.functionsSequenceArr.join(\'\').replace(/[^\)]/g,\'\').length;\n        }\n      }, //end of computed properties\n      mounted() {\n        // this.adjustLabelSize();\n      }\n    });\n\n\n  </script>\n\n</html>\n
