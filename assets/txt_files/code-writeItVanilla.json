{"code": "$.cloudinary.config({ cloud_name: \"writeit\", api_key: \"957122638812785\"});\n\n\n\n//VARIABLE DECLARATIONS\nlet richTextField = document.getElementById(\"richTextField\");\nlet buttonBold = document.getElementById(\"buttonBold\");\nlet buttonItalic = document.getElementById(\"buttonItalic\");\nlet buttonUnderline = document.getElementById(\"buttonUnderline\");\nlet buttonStrikethrough = document.getElementById(\"buttonStrikethrough\");\nlet buttonSubscript = document.getElementById(\"buttonSubscript\");\nlet buttonSuperscript = document.getElementById(\"buttonSuperscript\");\nlet buttonUndo = document.getElementById(\"buttonUndo\");\nlet buttonRedo = document.getElementById(\"buttonRedo\");\nlet buttonCut = document.getElementById(\"buttonCut\");\nlet buttonCopy = document.getElementById(\"buttonCopy\");\nlet buttonPaste = document.getElementById(\"buttonPaste\");\nlet buttonSelectAll = document.getElementById(\"buttonSelectAll\");\nlet buttonJustifyLeft = document.getElementById(\"buttonJustifyLeft\");\nlet buttonJustifyCenter = document.getElementById(\"buttonJustifyCenter\");\nlet buttonJustifyRight = document.getElementById(\"buttonJustifyRight\");\nlet buttonJustifyFull = document.getElementById(\"buttonJustifyFull\");\nlet buttonIndent = document.getElementById(\"buttonIndent\");\nlet buttonOutdent = document.getElementById(\"buttonOutdent\");\nlet buttonInsertUnorderedList = document.getElementById(\"buttonInsertUnorderedList\");\nlet buttonInsertOrderedList = document.getElementById(\"buttonInsertOrderedList\");\nlet buttonInsertParagraph = document.getElementById(\"buttonInsertParagraph\");\nlet selectParagraphStyle = document.getElementById(\"selectParagraphStyle\")\nlet buttonHorizontalRule = document.getElementById(\"buttonHorizontalRule\")\nlet buttonInsertLink = document.getElementById(\"buttonInsertLink\");\nlet buttonRemoveLink = document.getElementById(\"buttonRemoveLink\");\nlet buttonInlineSourceCode = document.getElementById(\"buttonInlineSourceCode\");\nlet buttonSourceCode = document.getElementById(\"buttonSourceCode\");\nlet buttonToggleEdit = document.getElementById(\"buttonToggleEdit\");\nlet toggleIcon = document.getElementById(\"toggleIcon\");\nlet selectFontStyle = document.getElementById(\"selectFontStyle\");\nlet selectFontSize = document.getElementById(\"selectFontSize\");\nlet buttonFontColor = document.getElementById(\"buttonFontColor\");\nlet inputFontColor = document.getElementById(\"inputFontColor\");\n// let inputBackgroundColor = document.getElementById(\"inputBackgroundColor\");\nlet buttonHighlightColor = document.getElementById(\"buttonHighlightColor\");\nlet inputHighlightColor = document.getElementById(\"inputHighlightColor\");\nlet buttonClearColorSettings = document.getElementById(\"buttonClearColorSettings\");\nlet buttonInsertOnlineImage = document.getElementById(\"buttonInsertOnlineImage\");\nlet buttonInsertOnlineVideo = document.getElementById(\"buttonInsertOnlineVideo\");\nlet buttonInsertCloudImage = document.getElementById(\"buttonInsertCloudImage\");\nlet formImageUploadCloudinary = document.getElementById(\"formImageUploadCloudinary\");\nlet cloudinary_fileupload = document.getElementsByClassName(\"cloudinary_fileupload\");\n\n\n\nlet formNewArticle = document.getElementById(\"formNewArticle\");\nlet buttonSubmitNewArticle = document.getElementById(\"buttonSubmitNewArticle\");\nlet inputNewArticleTitleVisible = document.getElementById(\"inputNewArticleTitleVisible\");\nlet inputNewArticle = document.getElementById(\"inputNewArticle\")\n\n\n\n\n\n\n//EVENT LISTENERS\nbuttonBold.addEventListener(\"click\", ()=&gt;{execCmd(\"bold\", false, null)});\nbuttonItalic.addEventListener(\"click\", ()=&gt;{execCmd(\"italic\", false, null)});\nbuttonUnderline.addEventListener(\"click\", ()=&gt;{execCmd(\"underline\", false, null)});\nbuttonStrikethrough.addEventListener(\"click\", ()=&gt;{execCmd(\"strikethrough\", false, null)});\nbuttonJustifyLeft.addEventListener(\"click\", ()=&gt;{execCmd(\"justifyLeft\", false, null)});\nbuttonJustifyCenter.addEventListener(\"click\", ()=&gt;{execCmd(\"justifyCenter\", false, null)});\nbuttonJustifyRight.addEventListener(\"click\", ()=&gt;{execCmd(\"justifyRight\", false, null)});\nbuttonJustifyFull.addEventListener(\"click\", ()=&gt;{execCmd(\"justifyFull\", false, null)});\nbuttonCut.addEventListener(\"click\", ()=&gt;{execCmd(\"cut\", false, null)});\nbuttonCopy.addEventListener(\"click\", ()=&gt;{execCmd(\"copy\", false, null)});\nbuttonPaste.addEventListener(\"click\", ()=&gt;{execCmd(\"paste\", false, null)}); //This has a problem\nbuttonIndent.addEventListener(\"click\", ()=&gt;{execCmd(\"indent\", false, null)});\nbuttonOutdent.addEventListener(\"click\", ()=&gt;{execCmd(\"outdent\", false, null)});\nbuttonSubscript.addEventListener(\"click\", ()=&gt;{execCmd(\"subscript\", false, null)});\nbuttonSuperscript.addEventListener(\"click\", ()=&gt;{execCmd(\"superscript\", false, null)});\nbuttonUndo.addEventListener(\"click\", ()=&gt;{execCmd(\"undo\", false, null)});\nbuttonRedo.addEventListener(\"click\", ()=&gt;{execCmd(\"redo\", false, null)});\nbuttonInsertUnorderedList.addEventListener(\"click\", ()=&gt;{execCmd(\"insertUnorderedList\", false, null)});\nbuttonInsertOrderedList.addEventListener(\"click\", ()=&gt;{execCmd(\"insertOrderedList\", false, null)});\nbuttonInsertParagraph.addEventListener(\"click\", ()=&gt;{execCmd(\"insertParagraph\", false, null)});\nselectParagraphStyle.addEventListener(\"change\", ()=&gt;{execCmd(\"formatBlock\", false, selectParagraphStyle[selectParagraphStyle.selectedIndex].getAttribute(\"value\"))});\nbuttonHorizontalRule.addEventListener(\"click\", ()=&gt;{execCmd(\"insertHorizontalRule\"), false, null});\nbuttonInsertLink.addEventListener(\"click\", ()=&gt;{execCmd(\"createLink\", false, prompt(\"Please enter a URL\", \"http://\"))});\nbuttonRemoveLink.addEventListener(\"click\", ()=&gt;{execCmd(\"unlink\", false, null)});\nbuttonInlineSourceCode.addEventListener(\"click\", ()=&gt;{execCmdPrompt(\"insertHTML\", false, prompt(\"Please insert the raw html here\", \"Example: &lt;h1&gt;writeIt rocks!&lt;/h1&gt;\"))});\nbuttonSourceCode.addEventListener(\"click\", ()=&gt;{toggleSource()});\nbuttonToggleEdit.addEventListener(\"click\", ()=&gt;{toggleEdit()})\nselectFontStyle.addEventListener(\"change\", ()=&gt;{execCmd(\"fontName\", false, selectFontStyle[selectFontStyle.selectedIndex].getAttribute(\"value\", \"value\"))});\nselectFontSize.addEventListener(\"change\", ()=&gt;{execCmd(\"fontSize\", false, selectFontSize[selectFontSize.selectedIndex].getAttribute(\"value\"))});\nbuttonFontColor.addEventListener(\"click\", ()=&gt;{clickInputInsert(inputFontColor)});\ninputFontColor.addEventListener(\"change\", ()=&gt;{execCmd(\"foreColor\", false, inputFontColor.value)}); //Not sure why the getAttribute(\"value\")  does not work\n// inputBackgroundColor.addEventListener(\"change\", ()=&gt;{execCmd(\"backColor\", false, inputBackgroundColor.value)}); //Need to work on this. Will this come in the function through a form?\nbuttonHighlightColor.addEventListener(\"click\", ()=&gt;{clickInputInsert(inputHighlightColor)});\ninputHighlightColor.addEventListener(\"change\", ()=&gt;{execCmd(\"hiliteColor\", false, inputHighlightColor.value)});\nbuttonClearColorSettings.addEventListener(\"click\", clearColorSettings);\nbuttonInsertOnlineImage.addEventListener(\"click\", ()=&gt;{execCmdPrompt(\"insertImage\", false, prompt(\"Please enter the image url\", \"http://\"))});\nbuttonInsertOnlineVideo.addEventListener(\"click\", ()=&gt;{uploadOnlineVideo(prompt(\"Please enter the video url\", \"http://\"))})\nbuttonSelectAll.addEventListener(\"click\", ()=&gt;{execCmd(\"selectAll\")});\nbuttonInsertCloudImage.addEventListener(\"click\", ()=&gt;{clickInputInsert(cloudinary_fileupload[1])})\n\n\nbuttonSubmitNewArticle.addEventListener(\"mouseover\", ()=&gt;{registerIframeInfo()});\ninputNewArticleTitleVisible.addEventListener(\"keyup\", inputUpdateTitle);\n\n\n\n\n\n\n\n// ----------FUNCTION DECLARATIONS=========================\n//ENABLE EDIT MODE FOR THE IFRAME AREA\nfunction enableEditMode() {\n  richTextField.contentDocument.designMode = \"On\";\n  richTextField.contentDocument.body.focus();\n}\n\n\n//EXECCOMMAND - ALLOWS US TO RUN COMMANDS TO MANIPULATE THE CONTENTS OF THE EDITABLE REGION\nfunction execCmd(command, bool, value) {\n  console.log(command);\n  event.preventDefault();\n  richTextField.contentDocument.execCommand(command, bool, value)\n  richTextField.contentDocument.body.focus();\n}\n\n\n//EXECCOMMAND FOR PROMPT USER INFO\nfunction execCmdPrompt(command, bool, value) {\n  if (value !== null) {\n    event.preventDefault();\n    richTextField.contentDocument.execCommand(command, bool, value)\n    richTextField.contentDocument.body.focus();\n  }\n}\n\n\n\n//SWITCH FROM TEXT EDITOR TO RAW HTML\nlet showingSourceCode = false; //A variable that defines if the view should be turned on or off\nfunction toggleSource() {\n  if (showingSourceCode) {\n    richTextField.contentDocument.getElementsByTagName(\"body\")[0].innerHTML = richTextField.contentDocument.getElementsByTagName(\"body\")[0].textContent;\n    showingSourceCode = false;\n  }\n  else {\n    richTextField.contentDocument.getElementsByTagName(\"body\")[0].textContent = richTextField.contentDocument.getElementsByTagName(\"body\")[0].innerHTML;\n    showingSourceCode = true;\n  }\n}\n// The textContent property sets or returns the textual content of the specified node, and all its descendants.\n// If you set the textContent property, any child nodes are removed and replaced by a single Text node containing the specified string.\n\n\n\n//SWITCH EDITOR ON AND OFF\nlet isInEditMode = true;\nfunction toggleEdit() {\n  if (isInEditMode) {\n    //Change the icon\n    event.preventDefault();\n    toggleIcon.classList.add(\"fa-toggle-off\");\n    toggleIcon.classList.remove(\"fa-toggle-on\");\n    //switch off the editor\n    richTextField.contentDocument.designMode = \"Off\";\n    isInEditMode = false;\n  }\n  else {\n    //Change the icon\n    event.preventDefault();\n    toggleIcon.classList.add(\"fa-toggle-on\");\n    toggleIcon.classList.remove(\"fa-toggle-off\");\n    //Switch on the editor\n    richTextField.contentDocument.designMode = \"On\";\n    richTextField.contentDocument.body.focus();\n    isInEditMode = true;\n  }\n}\n\n\n//CONNECT IFRAME TO THE TEXTAREA IN ORDER TO SUBMIT THE DATA TO DATABASE\nfunction registerIframeInfo(){\n  document.getElementById(\"textAreaNewArticle\").value = document.getElementById(\"richTextField\").contentDocument.body.innerHTML;\n}\n\n\n//CLEAR THE COLOR SETTINGS FOR FONT, HIGHLIGHT AND BACKGROUND\nfunction clearColorSettings() {\n  console.log(inputFontColor);\n  execCmd(\"foreColor\", false, \"#000000\");\n  execCmd(\"hiliteColor\", false, \"#ffffff\");\n  richTextField.contentDocument.body.focus();\n}\n\n\n//UPDATE THE TITLE IN THE HIDDEN INPUT FROM ENTRY IN THE VISIBLE INPUT\nfunction inputUpdateTitle() {\n  inputNewArticleTitle.value = inputNewArticleTitleVisible.value\n}\n\n\n//ACTIVATE INPUT TYPE=FILE TAGS BY CLICKING AT DIFFERENT BUTTONS\nfunction clickInputInsert(inputTag){\n  inputTag.click();\n}\n\n\n//UPLOAD AND RENDER IMAGE FROM HARD DRIVE\nfunction previewImageFile(source) {\n  let newImage = document.createElement(\"img\");\n\n  var file = source.files[0];\n  var reader = new FileReader(); //reads contents of files in the hard drive\n  reader.addEventListener(\"load\", function () {\n    newImage.src = reader.result;\n  }, false);\n\n\n  if (file) {\n    reader.readAsDataURL(file); //read contents of file and transform into base 64\n  }\n  console.log(newImage);\n  newImage.style.width = \"640px\";\n  // newImage.style.resize = \"both\";\n  // newImage.style.overflow = \"auto\";\n  // newImage.className = \"newImage\"\n\n  //Find the right position for image to be inserted\n  let cursorText = richTextField.contentDocument.getSelection().getRangeAt(0).endContainer.data; //returns a Selection object representing the text currently selected in the document.\n  let iframeChildren = richTextField.contentDocument.body.children;\n  for (let i = 0; i &lt; iframeChildren.length; i++) {\n    console.log(\"innerHTML for position\" + i + \":\" + iframeChildren[i].textContent.replace(/&nbsp;/g, \"\").trim());\n    // console.log(\"CursorText: \" + cursorText.trim());\n    if (iframeChildren[i].textContent.replace(/&nbsp;/g, \"\").trim() === cursorText.trim()) {\n      console.log(\"IN THE FIRST IF STATEMENT\");\n      // richTextField.contentDocument.body.insertBefore(newImage, iframeChildren[i]);\n      iframeChildren[i].appendChild(newImage);\n\n      return;\n    }\n  }\n  if (richTextField.contentDocument.body.innerHTML === \"\") {\n    richTextField.contentDocument.body.appendChild(newImage);\n  }\n  else if (richTextField.contentDocument.body.innerHTML !== \"\") {\n    console.log(\"Got in the else statement\");\n    richTextField.contentDocument.body.insertBefore(newImage, iframeChildren[0]);\n  }\n  //Focus the document\n  richTextField.contentDocument.body.focus();\n}\n\n\n\n//UPLOAD AND RENDER VIDEO FROM HARD DRIVE\n//preview the information coming from the source\nfunction previewFile(dataSource, sourceTagSrcAttribute) {\n  var file = dataSource.files[0];\n  var reader = new FileReader(); //reads contents of files in the hard drive\n\n  reader.addEventListener(\"load\", ()=&gt;{\n    sourceTagSrcAttribute.src = reader.result;\n    console.log(\"inside event listener\");\n\n    var dataURL = reader.result; //Get the information about the type of the file being imported\n    var mimeType = dataURL.split(\",\")[0].split(\":\")[1].split(\";\")[0];\n    sourceTagSrcAttribute.setAttribute(\"type\", mimeType);\n    console.log(sourceTagSrcAttribute.getAttribute(\"type\"));\n  }, false);\n\n  if (file) {\n    reader.readAsDataURL(file); //read contents of file and transform into base 64\n    console.log(file);\n  }\n}\n\n\n// find position in document and upload media file\nfunction findPositionAndUploadVideo(source) {\n\n  let newVideo = document.createElement(\"video\");\n  let newVideoSource = document.createElement(\"source\");\n  let cursorText = richTextField.contentDocument.getSelection().getRangeAt(0).endContainer.data; //returns a Selection object representing the text currently selected in the document.\n  let iframeChildren = richTextField.contentDocument.body.children;\n\n  newVideo.setAttribute(\"controls\", \"controls\");\n  newVideo.setAttribute(\"allowfullscreen\", \"allowfullscreen\");\n  newVideo.style.width = \"640px\";\n  newVideo.className = \"newVideo\";\n  newVideo.appendChild(newVideoSource);\n\n  if (richTextField.contentDocument.body.textContent === \"\") { //If the iframe is empty\n    console.log(\"first if statement\");\n    previewFile(source, newVideoSource);\n    setTimeout(function(){\n      richTextField.contentDocument.body.appendChild(newVideo);\n      richTextField.contentDocument.body.append(\".\");\n      richTextField.contentDocument.body.focus();\n    }, 1000);\n  }\n  else if (richTextField.contentDocument.body.textContent !== \"\" && richTextField.contentDocument.body.children.length === 0) {//If the iframe has text but no html children\n    previewFile(source, newVideoSource);\n    setTimeout(function(){\n      richTextField.contentDocument.body.appendChild(newVideo);\n      richTextField.contentDocument.body.append(\".\");\n      richTextField.contentDocument.body.focus();\n    }, 1000);\n  }\n  else if (richTextField.contentDocument.body.textContent !== \"\" && richTextField.contentDocument.body.children.length !== 0) {//The iframe has both content and html childrean\n    for (let i = 0; i &lt; iframeChildren.length; i++) {\n      console.log(\"innerHTML for position\" + i + \":\" + iframeChildren[i].innerHTML.replace(/&nbsp;/g, \"\").trim());\n      console.log(cursorText);\n      console.log(iframeChildren[i].textContent);\n      // console.log(\"CursorText: \" + cursorText.trim());\n      if (cursorText === undefined && iframeChildren[i].textContent.replace(/&nbsp;/g, \"\").trim() === \"\") {\n        console.log(\"IN THE IF OF THE ELSE\");\n        previewFile(source, newVideoSource);\n        setTimeout(function(){\n          iframeChildren[i].appendChild(newVideo);\n          richTextField.contentDocument.body.append(\".\");\n          richTextField.contentDocument.body.focus();\n        }, 1000);\n        return;\n      }\n      else if (iframeChildren[i].textContent.replace(/&nbsp;/g, \"\").trim() === cursorText.trim()) {\n        console.log(\"IN THE ELSE IF OF THE ELSE\");\n        // richTextField.contentDocument.body.insertBefore(newVideo, iframeChildren[i]);\n        previewFile(source, newVideoSource);\n        setTimeout(function(){\n          iframeChildren[i].appendChild(newVideo);\n          richTextField.contentDocument.body.append(\".\");\n          richTextField.contentDocument.body.focus();\n        }, 1000);\n        return;\n      }\n    }\n  }\n}\n\n\n\n//UPLOAD IMAGES OR VIDEOS FROM HARD DRIVE\n$(\".cloudinary_fileupload\").append($.cloudinary.unsigned_upload_tag(\"z2mez0vj\",\n{ cloud_name: \"writeit\" })\n  .bind(\"fileuploadprogress\", function(e, data) {\n    $(\".progress_bar\").css(\"width\", Math.round((data.loaded * 100.0) / data.total) + \"%\");\n  })\n  .bind(\"cloudinarydone\", function(e, data) {\n    console.log(e);\n    console.log(data.result);\n      console.log(data.result.path);\n      console.log(data.result.path.slice(data.result.path.length - 3));\n\n      if (data.result.path.slice(data.result.path.length - 3) === \"jpg\" || data.result.path.slice(data.result.path.length - 3) === \"png\" || data.result.path.slice(data.result.path.length - 3) === \"bmp\") {\n        let newImageSource = \"https://res.cloudinary.com/writeit/image/upload/w_640,q_80,f_auto/\" + data.result.path.slice(0, data.result.path.length - 3) + \"jpg\";\n        let newImage = document.createElement(\"img\");\n        newImage.src = newImageSource;\n        newImage.className = \"newImage\";\n        execCmdPrompt(\"insertImage\", false, newImageSource);\n      }\n      else if (data.result.path.slice(data.result.path.length - 3) === \"mp4\" || data.result.path.slice(data.result.path.length - 3) === \"mov\") {\n        let newVideoSource = \"https://res.cloudinary.com/writeit/video/upload/w_640,q_80/\" + data.result.path.slice(0, data.result.path.length - 3);\n        console.log(\"https://res.cloudinary.com/writeit/video/upload/w_640,q_80/\" + data.result.path.slice(0, data.result.path.length - 3) + \"mp4\");\n        let htmlVideoTag = \"&lt;video poster=\" + newVideoSource + \"jpg controls&gt;&lt;source src=\\"\" + newVideoSource + \"mp4\\"/&gt;&lt;/video&gt;\"\n        execCmdPrompt(\"insertHTML\", false, htmlVideoTag);\n      }\n      else if (data.result.path.slice(data.result.path.length - 3) === \"gif\") {\n        let newGifSource = \"https://res.cloudinary.com/writeit/image/upload/w_320,q_80/\" + data.result.path.slice(0, data.result.path.length - 3);\n        let htmlGifVideoTag = \"&lt;video poster=\" + newGifSource + \"jpg autoplay loop&gt;&lt;source src=\\"\" + newGifSource + \"mp4\\"/&gt;&lt;/video&gt;\"\n        execCmdPrompt(\"insertHTML\", false, htmlGifVideoTag);\n      }\n      else {\n        alert(\"The file you are trying to upload is not supported\");\n      }\n  })\n);\n\n\n// UPLOAD ONLINE VIDEOS\n  function uploadOnlineVideo(url){\n    var uploadParameter = \"&lt;iframe width=\\"640\\" height=\\"360\\" src=\\"\" + url + \"\\" frameborder=\\"0\\" allowfullscreen&gt;&lt;/iframe&gt;\"\n    execCmdPrompt(\"insertHTML\", false, uploadParameter)\n  }\n\n\n\n\n//FUNCTION CALLS\nenableEditMode();"}
